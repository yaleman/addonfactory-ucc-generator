{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p><code>splunk-add-on-ucc-framework</code> is a framework to generate UI-based Splunk Add-ons. It includes UI, REST handlers, Modular inputs, OAuth and Alert action templates.</p> <p>Only add-ons that use Python 3 are supported.</p> <p>Available as a GitHub action here: https://github.com/splunk/addonfactory-ucc-generator-action</p> <p>You can use Splunk Extension for VSCode  as well.</p>"},{"location":"#what-is-ucc","title":"What is UCC?","text":"<p>UCC stands for Universal Configuration Console. The purpose of having a framework for add-on generation is to simplify the process of add-on creation for the developers. UCC 5 uses SplunkUI  which is a new UI framework based on React. UCC UI repository can be found in the <code>ui</code> folder.</p> <p>UCC-based add-ons are being powered by another Splunk libraries: <code>solnlib</code> and <code>splunktaucclib</code>. More information here.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate UI (<code>appserver</code> folder)</li> <li>Generate Python REST handlers to support UI CRUD operations (<code>bin</code> folder)</li> <li>Generate OpenAPI description document (<code>appserver/static/openapi.json</code> file) (more info here)</li> <li>Generate <code>.conf</code> files (more info here)</li> <li>Install Python requirements (<code>lib</code> folder)</li> <li>Generate metadata files (<code>metadata</code> folder)</li> <li>Generate the monitoring dashboard (more info here) </li> <li>Possibility to extend UI with custom code (more info here)</li> <li>Possibility to extend the build process via <code>additional_packaging.py</code> file (more info here)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><code>splunk-add-on-ucc-framework</code> is available on PyPI.</p>"},{"location":"#caveats","title":"Caveats","text":"<ul> <li>Some specific Python libraries (like, <code>google-cloud-bigquery</code>) use <code>.so</code> files to operate and <code>pip</code> will install OS-specific versions of those <code>.so</code> files, which makes it impossible to use such add-on on Windows machine when it was built on macOS.</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#5351-2023-12-14","title":"5.35.1 (2023-12-14)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>add missing colorama dependency (#973) (f17d47d)</li> <li>add missing colorama import (fbb71bd)</li> </ul>"},{"location":"CHANGELOG/#5350-2023-12-13","title":"5.35.0 (2023-12-13)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>add tests and auth_access_token to schema (#969) (6e1e743)</li> </ul>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>add support for downloading os-dependent libraries (#963) (6cfb5a3)</li> <li>build commands produces detailed output of what happened (#927) (3fad1a2)</li> </ul>"},{"location":"CHANGELOG/#5341-2023-12-06","title":"5.34.1 (2023-12-06)","text":""},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>add control group wrapper max width to 750px (#966) (0213c45)</li> </ul>"},{"location":"CHANGELOG/#5340-2023-11-28","title":"5.34.0 (2023-11-28)","text":""},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>change location of openapi.json generated file (#958) (e0d38b7)</li> <li>globalConfig validator respects numbers in values in autoCompleteFields (#957) (1716494)</li> <li>revert to static width of modal (#955) (aec869f)</li> <li>update urllib3 (#922) (11ff4c6)</li> </ul>"},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>add optional label for helpLink component (#939) (e3a9b40)</li> <li>add support for disableonEdit in oauth (#953) (d948128)</li> <li>additional validations for the groups feature (#926) (29c1251)</li> <li>ADDON-64844 better spacing in modal (#935) (b385759)</li> <li>ADDON-65107 implement download button for openapi (#932) (f71d7ec)</li> <li>schema.json: make entity schemas more specific (#938) (24c667b)</li> </ul>"},{"location":"CHANGELOG/#5330-2023-11-14","title":"5.33.0 (2023-11-14)","text":""},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>release v5.33.0 (#942) (c5968d2), closes #906 #922 #916 #888</li> </ul>"},{"location":"CHANGELOG/#5320-2023-10-13","title":"5.32.0 (2023-10-13)","text":""},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li>v5.32.0 release (#907) (f691ce0), closes #897 #898 #889 #899 #901 #895</li> </ul>"},{"location":"CHANGELOG/#5311-2023-10-06","title":"5.31.1 (2023-10-06)","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>include UCC UI into UCC during the release step (#891) (5207dca), closes #890 #890</li> </ul>"},{"location":"CHANGELOG/#5311-beta1-2023-10-06","title":"5.31.1-beta.1 (2023-10-06)","text":""},{"location":"CHANGELOG/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>include UCC UI into UCC during the release step (#890) (76dd699)</li> </ul>"},{"location":"CHANGELOG/#5310-2023-10-05","title":"5.31.0 (2023-10-05)","text":"<p>It\u2019s a technical release to conclude the migration of UCC UI into this repository and we also happen to release 1 feature.</p>"},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li>\u201cEnable all\u201d / \u201cDisable all\u201d buttons for Inputs page (https://github.com/splunk/addonfactory-ucc-base-ui/pull/437 nad https://github.com/splunk/addonfactory-ucc-base-ui/pull/443)</li> </ul>"},{"location":"CHANGELOG/#5300-2023-10-01","title":"5.30.0 (2023-10-01)","text":""},{"location":"CHANGELOG/#features_5","title":"Features","text":"<ul> <li>release v5.30.0 (#848) (fb93601), closes #846 #847 #849 #850</li> </ul>"},{"location":"CHANGELOG/#5290-2023-09-22","title":"5.29.0 (2023-09-22)","text":""},{"location":"CHANGELOG/#features_6","title":"Features","text":"<ul> <li>release v5.29.0 (#840) (c874f86), closes #835 #836 #838 #839</li> </ul>"},{"location":"CHANGELOG/#5286-2023-09-13","title":"5.28.6 (2023-09-13)","text":""},{"location":"CHANGELOG/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>update UCC UI to v1.29.2 (#829) (bffdc74)</li> </ul>"},{"location":"CHANGELOG/#5285-2023-09-06","title":"5.28.5 (2023-09-06)","text":""},{"location":"CHANGELOG/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>update pip upgrade command (#825) (b439296), closes #821</li> </ul>"},{"location":"CHANGELOG/#5284-2023-07-19","title":"5.28.4 (2023-07-19)","text":""},{"location":"CHANGELOG/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>add-on without globalConfig file should not be visible (#811) (b2017f6)</li> </ul>"},{"location":"CHANGELOG/#5283-2023-07-17","title":"5.28.3 (2023-07-17)","text":""},{"location":"CHANGELOG/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>resolve failing ucc-gen by pinning pip version (#809) (33676a9), closes #808</li> </ul>"},{"location":"CHANGELOG/#5282-2023-07-07","title":"5.28.2 (2023-07-07)","text":""},{"location":"CHANGELOG/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>input.template should not render interval field (#799) (6375de1)</li> </ul>"},{"location":"CHANGELOG/#5281-2023-06-22","title":"5.28.1 (2023-06-22)","text":""},{"location":"CHANGELOG/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>typo in UCC UI v1.28.0 (#791) (7bb4530)</li> </ul>"},{"location":"CHANGELOG/#5280-2023-06-22","title":"5.28.0 (2023-06-22)","text":""},{"location":"CHANGELOG/#features_7","title":"Features","text":"<ul> <li>added support for subTitle field in service (#790) (378f362)</li> </ul>"},{"location":"CHANGELOG/#5273-2023-06-06","title":"5.27.3 (2023-06-06)","text":""},{"location":"CHANGELOG/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>change modular input template according to globalConfig file (#787) (24c8658)</li> </ul>"},{"location":"CHANGELOG/#5272-2023-06-02","title":"5.27.2 (2023-06-02)","text":""},{"location":"CHANGELOG/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>update UCC UI to v1.27.1 (#785) (ce25019)</li> </ul>"},{"location":"CHANGELOG/#5271-2023-05-26","title":"5.27.1 (2023-05-26)","text":""},{"location":"CHANGELOG/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>require requests 2.31.0 and urllib3 &lt; 2 (#783) (7f4e778)</li> </ul>"},{"location":"CHANGELOG/#5270-2023-05-17","title":"5.27.0 (2023-05-17)","text":""},{"location":"CHANGELOG/#features_8","title":"Features","text":"<ul> <li>release v5.27.0 (#765) (5b55833), closes #749 #750 #751 #752 #753 #754 /dev.splunk.com/enterprise/reference/packagingtoolkit/pkgtoolkitappmanifest/#JSON-schema-200 #755</li> </ul>"},{"location":"CHANGELOG/#5260-2023-05-02","title":"5.26.0 (2023-05-02)","text":""},{"location":"CHANGELOG/#features_9","title":"Features","text":"<ul> <li>create openapi such way that generated client code allows to update configuration and inputs (#740) (c412a60)</li> <li>GET methods and responses allow to get data (#742) (6fe35cd)</li> </ul>"},{"location":"CHANGELOG/#5250-2023-04-18","title":"5.25.0 (2023-04-18)","text":""},{"location":"CHANGELOG/#features_10","title":"Features","text":"<ul> <li>release v5.25.0 (#733) (6b3e649), closes #718 #719 #722 #723 #724 #726 #727 #725 #728 #734 #735</li> </ul>"},{"location":"CHANGELOG/#5240-2023-04-04","title":"5.24.0 (2023-04-04)","text":""},{"location":"CHANGELOG/#features_11","title":"Features","text":"<ul> <li>release v5.24.0 (#713) (e5bc2f1), closes #709 #710 #711 #712 #714</li> </ul>"},{"location":"CHANGELOG/#5232-2023-03-23","title":"5.23.2 (2023-03-23)","text":""},{"location":"CHANGELOG/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>move mkdocs-material to dev dependency (#707) (504dbfa)</li> </ul>"},{"location":"CHANGELOG/#5231-2023-03-20","title":"5.23.1 (2023-03-20)","text":""},{"location":"CHANGELOG/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>dropdownlist_splunk_search does not require options (#706) (ff9e50b)</li> </ul>"},{"location":"CHANGELOG/#5230-2023-03-20","title":"5.23.0 (2023-03-20)","text":""},{"location":"CHANGELOG/#features_12","title":"Features","text":"<ul> <li>release v5.23.0 (#705) (f8211f6), closes #699 #700 #703 #704 #702 #701</li> </ul>"},{"location":"CHANGELOG/#5220-2023-03-09","title":"5.22.0 (2023-03-09)","text":""},{"location":"CHANGELOG/#features_13","title":"Features","text":"<ul> <li>v5.22.0 release (#678) (9efc0c2), closes #662 #663 #664 #665 #666 #667 #668 #669 #670 #672 #673 #671 #674 #677 #679 #680 #681 #682 #683 #684 #685 #686 #688 #689 #687 #690 #691 #693 #694 #695 #692 #697</li> </ul>"},{"location":"CHANGELOG/#5210-2023-02-22","title":"5.21.0 (2023-02-22)","text":""},{"location":"CHANGELOG/#features_14","title":"Features","text":"<ul> <li>release v5.21.0 (#659) (fdd7164), closes #656 #658 #657 #650</li> </ul>"},{"location":"CHANGELOG/#5200-2023-02-13","title":"5.20.0 (2023-02-13)","text":""},{"location":"CHANGELOG/#features_15","title":"Features","text":"<ul> <li>release v5.20.0 (#634) (e2a389d), closes #624 #626 #615 #618 #612 #629 #632 #633</li> <li>trigger v5.20.0 release (#635) (d07f487)</li> </ul>"},{"location":"CHANGELOG/#5190-2023-01-03","title":"5.19.0 (2023-01-03)","text":""},{"location":"CHANGELOG/#features_16","title":"Features","text":"<ul> <li>release v5.19.0 (#601) (2dc1ae1), closes #593 #594 #595 /github.com/splunk/addonfactory-ucc-base-ui/blob/283d5abcf8f462ac10de876464bc1719fd19ff90/src/main/webapp/util/uccConfigurationValidators.js#L170-L184 #584</li> </ul>"},{"location":"CHANGELOG/#5180-2022-12-12","title":"5.18.0 (2022-12-12)","text":""},{"location":"CHANGELOG/#features_17","title":"Features","text":"<ul> <li>v5.18.0 release (#583) (312839e)</li> </ul>"},{"location":"CHANGELOG/#5171-2022-11-30","title":"5.17.1 (2022-11-30)","text":""},{"location":"CHANGELOG/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>update UCC UI to v1.15.1 (#578) (173a8f2)</li> </ul>"},{"location":"CHANGELOG/#5170-2022-11-29","title":"5.17.0 (2022-11-29)","text":""},{"location":"CHANGELOG/#features_18","title":"Features","text":"<ul> <li>update UCC UI to 1.15.0 (#576) (a2788a2)</li> </ul>"},{"location":"CHANGELOG/#5161-2022-11-28","title":"5.16.1 (2022-11-28)","text":""},{"location":"CHANGELOG/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>update UCC UI to 1.14.2 (#573) (20d2a5c)</li> </ul>"},{"location":"CHANGELOG/#5160-2022-11-23","title":"5.16.0 (2022-11-23)","text":""},{"location":"CHANGELOG/#features_19","title":"Features","text":"<ul> <li>update UCC UI to v1.14.1 (#563) (9d9cb86)</li> </ul>"},{"location":"CHANGELOG/#5151-2022-11-09","title":"5.15.1 (2022-11-09)","text":""},{"location":"CHANGELOG/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>build add-on if config param is present (536634a)</li> </ul>"},{"location":"CHANGELOG/#5150-2022-11-07","title":"5.15.0 (2022-11-07)","text":""},{"location":"CHANGELOG/#features_20","title":"Features","text":"<ul> <li>add validation for the splunktaucclib to be included (#549) (b7eacb6)</li> </ul>"},{"location":"CHANGELOG/#5142-2022-11-02","title":"5.14.2 (2022-11-02)","text":""},{"location":"CHANGELOG/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>update UCC UI to v1.12.4 (#546) (65da70b)</li> </ul>"},{"location":"CHANGELOG/#5141-2022-10-18","title":"5.14.1 (2022-10-18)","text":""},{"location":"CHANGELOG/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>code: ADDON-56381 Using the latest version of UCC UI (#540) (d760a31)</li> </ul>"},{"location":"CHANGELOG/#5140-2022-10-18","title":"5.14.0 (2022-10-18)","text":""},{"location":"CHANGELOG/#features_21","title":"Features","text":"<ul> <li>added support for YAML file (#536) (10eebaa)</li> </ul>"},{"location":"CHANGELOG/#5130-2022-08-02","title":"5.13.0 (2022-08-02)","text":""},{"location":"CHANGELOG/#features_22","title":"Features","text":"<ul> <li>add \u2013python-binary-name flag to specify Python name to install libraries (#485) (bc46170)</li> </ul>"},{"location":"CHANGELOG/#5120-2022-07-08","title":"5.12.0 (2022-07-08)","text":""},{"location":"CHANGELOG/#features_23","title":"Features","text":"<ul> <li>new version of UCC UI (#479) (db72816)</li> </ul>"},{"location":"CHANGELOG/#5110-2022-07-08","title":"5.11.0 (2022-07-08)","text":""},{"location":"CHANGELOG/#features_24","title":"Features","text":"<ul> <li>add sc_admin to default.meta (#477) (4298fa3)</li> </ul>"},{"location":"CHANGELOG/#5104-2022-07-04","title":"5.10.4 (2022-07-04)","text":""},{"location":"CHANGELOG/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>better exception handling when could not get the version from git tags (#476) (2aafc09)</li> </ul>"},{"location":"CHANGELOG/#5103-2022-07-03","title":"5.10.3 (2022-07-03)","text":""},{"location":"CHANGELOG/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>no crash if metadata folder exists (#474) (03aa2ae)</li> </ul>"},{"location":"CHANGELOG/#5102-2022-02-01","title":"5.10.2 (2022-02-01)","text":""},{"location":"CHANGELOG/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>update ucc ui version to 1.9.1 (#418) (822361c)</li> </ul>"},{"location":"CHANGELOG/#5101-2021-11-29","title":"5.10.1 (2021-11-29)","text":""},{"location":"CHANGELOG/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>remove generation of <code>expose:_splunkd_data</code> stanza in web.conf (df6441e), closes #303</li> </ul>"},{"location":"CHANGELOG/#5100-2021-11-16","title":"5.10.0 (2021-11-16)","text":""},{"location":"CHANGELOG/#features_25","title":"Features","text":"<ul> <li>migrate to separate conf-parser library (2ab9fe9)</li> </ul>"},{"location":"CHANGELOG/#590-2021-10-04","title":"5.9.0 (2021-10-04)","text":""},{"location":"CHANGELOG/#features_26","title":"Features","text":"<ul> <li>trigger v5.9.0 release (a01259c)</li> </ul>"},{"location":"CHANGELOG/#582-2021-08-18","title":"5.8.2 (2021-08-18)","text":""},{"location":"CHANGELOG/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>add icon_path to each modular alert conf (c6828b9)</li> </ul>"},{"location":"CHANGELOG/#581-2021-08-17","title":"5.8.1 (2021-08-17)","text":""},{"location":"CHANGELOG/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>alert html generation (7dc8860)</li> </ul>"},{"location":"CHANGELOG/#580-2021-08-16","title":"5.8.0 (2021-08-16)","text":""},{"location":"CHANGELOG/#features_27","title":"Features","text":"<ul> <li>delete <code>apiVersion</code> from globalConfig.json and bump schemaVersion (6c22704)</li> </ul>"},{"location":"CHANGELOG/#570-2021-08-14","title":"5.7.0 (2021-08-14)","text":""},{"location":"CHANGELOG/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>Dont remove jsonschema metadata files (539d8f6)</li> <li>release (185dd15)</li> </ul>"},{"location":"CHANGELOG/#features_28","title":"Features","text":"<ul> <li>generate metadata/default.meta (629b248)</li> <li>python: retain dist info files (7c8616a)</li> </ul>"},{"location":"CHANGELOG/#562-2021-08-10","title":"5.6.2 (2021-08-10)","text":""},{"location":"CHANGELOG/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>dump dunamai to 1.5.5 version (6cc76bd)</li> </ul>"},{"location":"CHANGELOG/#561-2021-08-09","title":"5.6.1 (2021-08-09)","text":""},{"location":"CHANGELOG/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>do not ignore UCC UI folder (25cec26)</li> </ul>"},{"location":"CHANGELOG/#560-2021-08-09","title":"5.6.0 (2021-08-09)","text":""},{"location":"CHANGELOG/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>update ucc ui version to 1.8.4 (2daa655)</li> </ul>"},{"location":"CHANGELOG/#features_29","title":"Features","text":"<ul> <li>remove splunktaucclib (661eb64)</li> </ul>"},{"location":"CHANGELOG/#558-2021-07-27","title":"5.5.8 (2021-07-27)","text":""},{"location":"CHANGELOG/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>splunktaucclib update (26eb068)</li> </ul>"},{"location":"CHANGELOG/#557-2021-07-26","title":"5.5.7 (2021-07-26)","text":""},{"location":"CHANGELOG/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>remove non-valid Python code (b7adf48)</li> </ul>"},{"location":"CHANGELOG/#556-2021-07-20","title":"5.5.6 (2021-07-20)","text":""},{"location":"CHANGELOG/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>deps: bump jinja2 from 2.11.3 to 3.0.1 (#274) (1a736af)</li> </ul>"},{"location":"CHANGELOG/#555-2021-07-19","title":"5.5.5 (2021-07-19)","text":""},{"location":"CHANGELOG/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>TABConfigParser.remove_section() is not working read() (8c82a45)</li> <li>update ucc ui version to 1.8.3 (49a89d5)</li> </ul>"},{"location":"CHANGELOG/#553-2021-07-12","title":"5.5.3 (2021-07-12)","text":""},{"location":"CHANGELOG/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>validate that a configuration tab with table has field \u201cname\u201d (#261) (234f1e9)</li> </ul>"},{"location":"CHANGELOG/#552-2021-07-07","title":"5.5.2 (2021-07-07)","text":""},{"location":"CHANGELOG/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>issue with indent function (#257) (898fdb4)</li> </ul>"},{"location":"CHANGELOG/#551-2021-07-07","title":"5.5.1 (2021-07-07)","text":""},{"location":"CHANGELOG/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>broken import after modular alert code generation (#255) (a3138ec)</li> <li>remove unnecessary dependencies (6bd263f)</li> <li>update ucc ui version (e3e5cba)</li> <li>update ucc ui version to 1.7.7 (1f82472)</li> <li>update ucc ui version to 1.8.2 (300ca6a)</li> <li>update ucc version to 1.7.6 (2e47cc3)</li> <li>update ucc version to 1.8.1 (d7fa1c6)</li> </ul>"},{"location":"CHANGELOG/#features_30","title":"Features","text":"<ul> <li>support app.manifest file with comments (70eb38e), closes /github.com/splunk/appinspect/blob/fabd1387cf41e087edd86fb7f28e2f9e69a1467c/splunk_appinspect/checks/check_support_and_installation_standards.py#L169-L180</li> <li>update ucc ui version (cf04fa7)</li> </ul>"},{"location":"CHANGELOG/#531-2021-06-15","title":"5.3.1 (2021-06-15)","text":""},{"location":"CHANGELOG/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>remove splunktalib as not used (#231) (757c260)</li> </ul>"},{"location":"CHANGELOG/#530-2021-06-14","title":"5.3.0 (2021-06-14)","text":""},{"location":"CHANGELOG/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>update Splunk libraries to latest versions (#229) (1bddfd6)</li> </ul>"},{"location":"CHANGELOG/#features_31","title":"Features","text":"<ul> <li>pip causing app inspect failures and NOTICE (#224) (d83b687)</li> </ul>"},{"location":"CHANGELOG/#521-2021-06-13","title":"5.2.1 (2021-06-13)","text":""},{"location":"CHANGELOG/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>switch to slim docker image (7bde41c)</li> </ul>"},{"location":"CHANGELOG/#520-2021-06-12","title":"5.2.0 (2021-06-12)","text":""},{"location":"CHANGELOG/#features_32","title":"Features","text":"<ul> <li>drop support for py2/py3 compatible libraries (#225) (29fafad)</li> </ul>"},{"location":"CHANGELOG/#510-2021-06-09","title":"5.1.0 (2021-06-09)","text":""},{"location":"CHANGELOG/#features_33","title":"Features","text":"<ul> <li>Include notice file in distribution (#220) (fdfdf2b)</li> <li>ucc as a library (#218) (7f06c29)</li> <li>update ucc ui version (df8687e)</li> </ul>"},{"location":"CHANGELOG/#503-2021-06-08","title":"5.0.3 (2021-06-08)","text":""},{"location":"CHANGELOG/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>include schema and notice file in pip package (7b67c81)</li> <li>include schema and notice file in pip package (92d0ad6)</li> <li>quick fix for ta-version argument (e26e8bf)</li> <li>Replace Circle CI with Github actions (aa07fcf)</li> <li>support for ta-version argument (710452a)</li> <li>ucc-gen to replace token for redirect.xml (1128842)</li> <li>use defusedxml instead of xml library (c3fdfc0)</li> </ul>"},{"location":"CHANGELOG/#500-develop1-2021-05-31","title":"5.0.0-develop.1 (2021-05-31)","text":""},{"location":"CHANGELOG/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>consume schema.json from ucc ui (6069ce2)</li> <li>update ucc ui version (1cf1d59)</li> </ul>"},{"location":"CHANGELOG/#features_34","title":"Features","text":"<ul> <li>migrated to splunk-ui (aab1012)</li> <li>migrated to splunk-ui (42b9a20)</li> <li>update splunktaucclib to 4.2.0 (be831af)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes","title":"BREAKING CHANGES","text":"<ul> <li>Migrate UI to SplunkUI framework</li> <li>Migrate UI to SplunkUI framework</li> </ul>"},{"location":"CHANGELOG/#440-2021-04-14","title":"4.4.0 (2021-04-14)","text":""},{"location":"CHANGELOG/#bug-fixes_44","title":"Bug Fixes","text":"<ul> <li>add interationalization to added changes (cf70a0f)</li> <li>add missing react-toast-notifications dep (88a1ce9)</li> <li>commented oauth realated logic from ucc-gen temporarily (6d08509)</li> <li>error handling and migrated to functional component (3e2d15d)</li> <li>error handling in errorboundary (b1ed49b)</li> <li>filter issue in table (86fffbe)</li> <li>initial default tab query param (2d4d7dd)</li> <li>internationalization fixes and code deduplication (b41f33d)</li> <li>make minor modifications for form submit on single page form (1501401)</li> <li>minor fixes and comments (be8dabd)</li> <li>refactored table header as separate component (0c386de)</li> <li>remove temporary test change for error boundary (baa54e7)</li> <li>removed multiple calls to endpoint in tab navigation for configuration page, addded conditional rendering of moreInfo based on globalConfig and fixed single input type dropdown filter (f1c2545)</li> <li>routing history with query params (9c5cc2f)</li> <li>title in input and configuration page templates (6328fdf)</li> <li>ucc_ui_lib: asynchronous state updates for status toggle button (4e63041)</li> <li>update ucc ui version (31ac853)</li> <li>update ucc ui version (8b077dc)</li> <li>update ucc ui version (b6dc8b4)</li> <li>update ucc ui version (e340376)</li> <li>use primitive type in useEffect for query param updates to reduce executions (a4a0542)</li> </ul>"},{"location":"CHANGELOG/#features_35","title":"Features","text":"<ul> <li>add page style dialog and its routing (a475235)</li> <li>Added button for create new input (979b058)</li> <li>added configuration page integration for table and single page form (b7a4d50)</li> <li>Added Create Input  button in input_page (b2b3562)</li> <li>Added custom cell feature in the table and fixed sorting issue (3711846)</li> <li>Added error modal component (bbde4cf)</li> <li>Added localization in titles (24f663b)</li> <li>Added parsing and validation functionality for globalConfig.json file (e690000)</li> <li>added routing for record and tab name (748ab74)</li> <li>Added schemaGenerator.py file (be0b945)</li> <li>Added table component with actions button (f550769)</li> <li>build: Move ucc-ui-lib to a new repo (71db6b1)</li> <li>Custom row feature implemented (308d847)</li> <li>Data flow using react context api (ddfaf41)</li> <li>Fixed issue (887f419)</li> <li>Fixed prop type validation issue (b0643e6)</li> <li>Fixed the delete model issue (71743ae)</li> <li>Fixed typo (9d5d0ee)</li> <li>Fixed typo (3ce2363)</li> <li>Fixed typo (668d2a5)</li> <li>Form design changes (3f34bfa)</li> <li>formatted file (ec3c0a6)</li> <li>Implemented filter functionality in the table component (4a77545)</li> <li>Implemented styled component (503aeb4)</li> <li>Pagination component implemented (ab41e36)</li> <li>Refactored table component (4206ce3)</li> <li>Removed commented code (bbdda12)</li> <li>Removed id from custom table (2afdc83)</li> <li>Removed key (f80499d)</li> <li>Removed log line (1f51cb4)</li> <li>Removed logs (6763ef9)</li> <li>Removed logs (36476ac)</li> <li>Removed patch file (ef065dc)</li> <li>Resolved comments (5a6088b)</li> <li>Set configuration page to default (6b7150a)</li> <li>update splunktaucclib to 4.2.0 (be831af)</li> <li>Update the way to store data in the context (8d11e7d)</li> <li>update ucc ui version (d562bea)</li> <li>Updated custom cell file (0479106)</li> <li>Updated file name (8640413)</li> <li>Used i18n in custom cell (06d0f02)</li> <li>validate JSON configuration before generating build (0c80d62)</li> </ul>"},{"location":"CHANGELOG/#440-2021-04-14_1","title":"4.4.0 (2021-04-14)","text":""},{"location":"CHANGELOG/#bug-fixes_45","title":"Bug Fixes","text":"<ul> <li>add interationalization to added changes (cf70a0f)</li> <li>add missing react-toast-notifications dep (88a1ce9)</li> <li>commented oauth realated logic from ucc-gen temporarily (6d08509)</li> <li>error handling and migrated to functional component (3e2d15d)</li> <li>error handling in errorboundary (b1ed49b)</li> <li>filter issue in table (86fffbe)</li> <li>initial default tab query param (2d4d7dd)</li> <li>internationalization fixes and code deduplication (b41f33d)</li> <li>make minor modifications for form submit on single page form (1501401)</li> <li>minor fixes and comments (be8dabd)</li> <li>refactored table header as separate component (0c386de)</li> <li>remove temporary test change for error boundary (baa54e7)</li> <li>removed multiple calls to endpoint in tab navigation for configuration page, addded conditional rendering of moreInfo based on globalConfig and fixed single input type dropdown filter (f1c2545)</li> <li>routing history with query params (9c5cc2f)</li> <li>title in input and configuration page templates (6328fdf)</li> <li>ucc_ui_lib: asynchronous state updates for status toggle button (4e63041)</li> <li>update ucc ui version (8b077dc)</li> <li>update ucc ui version (b6dc8b4)</li> <li>update ucc ui version (e340376)</li> <li>use primitive type in useEffect for query param updates to reduce executions (a4a0542)</li> </ul>"},{"location":"CHANGELOG/#features_36","title":"Features","text":"<ul> <li>add page style dialog and its routing (a475235)</li> <li>Added button for create new input (979b058)</li> <li>added configuration page integration for table and single page form (b7a4d50)</li> <li>Added Create Input  button in input_page (b2b3562)</li> <li>Added custom cell feature in the table and fixed sorting issue (3711846)</li> <li>Added error modal component (bbde4cf)</li> <li>Added localization in titles (24f663b)</li> <li>Added parsing and validation functionality for globalConfig.json file (e690000)</li> <li>added routing for record and tab name (748ab74)</li> <li>Added schemaGenerator.py file (be0b945)</li> <li>Added table component with actions button (f550769)</li> <li>build: Move ucc-ui-lib to a new repo (71db6b1)</li> <li>Custom row feature implemented (308d847)</li> <li>Data flow using react context api (ddfaf41)</li> <li>Fixed issue (887f419)</li> <li>Fixed prop type validation issue (b0643e6)</li> <li>Fixed the delete model issue (71743ae)</li> <li>Fixed typo (9d5d0ee)</li> <li>Fixed typo (3ce2363)</li> <li>Fixed typo (668d2a5)</li> <li>Form design changes (3f34bfa)</li> <li>formatted file (ec3c0a6)</li> <li>Implemented filter functionality in the table component (4a77545)</li> <li>Implemented styled component (503aeb4)</li> <li>Pagination component implemented (ab41e36)</li> <li>Refactored table component (4206ce3)</li> <li>Removed commented code (bbdda12)</li> <li>Removed id from custom table (2afdc83)</li> <li>Removed key (f80499d)</li> <li>Removed log line (1f51cb4)</li> <li>Removed logs (6763ef9)</li> <li>Removed logs (36476ac)</li> <li>Removed patch file (ef065dc)</li> <li>Resolved comments (5a6088b)</li> <li>Set configuration page to default (6b7150a)</li> <li>Update the way to store data in the context (8d11e7d)</li> <li>update ucc ui version (d562bea)</li> <li>Updated custom cell file (0479106)</li> <li>Updated file name (8640413)</li> <li>Used i18n in custom cell (06d0f02)</li> <li>validate JSON configuration before generating build (0c80d62)</li> </ul>"},{"location":"CHANGELOG/#440-2021-04-14_2","title":"4.4.0 (2021-04-14)","text":""},{"location":"CHANGELOG/#features_37","title":"Features","text":"<ul> <li>validate JSON configuration before generating build (0c80d62)</li> </ul>"},{"location":"CHANGELOG/#430-2021-04-06","title":"4.3.0 (2021-04-06)","text":""},{"location":"CHANGELOG/#bug-fixes_46","title":"Bug Fixes","text":"<ul> <li>added support for additional packaging (f9acc98)</li> <li>bump splunktaucclib to 4.0.13 (51a07f0)</li> <li>license: Correct License reference to Apache-2 (1996410)</li> <li>location of files was incorrect on commit (47d494d)</li> <li>Update CI to new standard (fe6b46b)</li> </ul>"},{"location":"CHANGELOG/#features_38","title":"Features","text":"<ul> <li>supporting the new version mechanism (1768138)</li> <li>version: Support develop versions (ea42e81)</li> </ul>"},{"location":"CHANGELOG/#419-b1-2020-11-13","title":"4.1.9-b.1 (2020-11-13)","text":""},{"location":"CHANGELOG/#418-b1-2020-11-13","title":"4.1.8-b.1 (2020-11-13)","text":""},{"location":"CHANGELOG/#416-a7-2020-11-09","title":"4.1.6-a.7 (2020-11-09)","text":""},{"location":"CHANGELOG/#411-b1-2020-10-08","title":"4.1.1-b.1 (2020-10-08)","text":""},{"location":"CHANGELOG/#411-a3-2020-10-08","title":"4.1.1-a.3 (2020-10-08)","text":""},{"location":"CHANGELOG/#411-a2-2020-10-08","title":"4.1.1-a.2 (2020-10-08)","text":""},{"location":"CHANGELOG/#411-a1-2020-10-08","title":"4.1.1-a.1 (2020-10-08)","text":""},{"location":"CHANGELOG/#405-a9-2020-09-23","title":"4.0.5-a.9 (2020-09-23)","text":""},{"location":"CHANGELOG/#405-a8-2020-09-22","title":"4.0.5-a.8 (2020-09-22)","text":""},{"location":"CHANGELOG/#405-a7-2020-09-22","title":"4.0.5-a.7 (2020-09-22)","text":""},{"location":"CHANGELOG/#reverts","title":"Reverts","text":"<ul> <li>Revert \u201cModified include in pyproject.toml with a glob\u201d (14304e3)</li> </ul>"},{"location":"CHANGELOG/#405-a5-2020-09-19","title":"4.0.5-a.5 (2020-09-19)","text":""},{"location":"CHANGELOG/#405-a2-2020-09-19","title":"4.0.5-a.2 (2020-09-19)","text":""},{"location":"CHANGELOG/#405-a1-2020-09-19","title":"4.0.5-a.1 (2020-09-19)","text":""},{"location":"CHANGELOG/#404-2020-09-17","title":"4.0.4 (2020-09-17)","text":""},{"location":"additional_packaging/","title":"<code>additional_packaging.py</code> file","text":"<p>To extend the build process, you can create <code>additional_packaging.py</code> file in the same file level where you have your globalConfig file.</p> <p>This file should have <code>additional_packaging</code> function which accepts 1 argument: add-on name.</p> <p>Example of how to utilize it:</p> <ul> <li>Build custom UI after <code>ucc-gen</code> finishes all its necessary steps.</li> <li>Workaround a <code>ucc-gen</code> feature which was not implemented.</li> </ul>"},{"location":"configurations/","title":"Configuration","text":"<p><code>Configuration</code> tab can have multiple subtabs, for example, a tab for account configuration (Use to configure the account by adding account credentials), proxy configuration and logging level configuration.</p>"},{"location":"configurations/#configuration-properties","title":"Configuration Properties","text":"Property Type Description title* string - description string To provide a brief summary of an configuration page. subDescription(../advanced/sub_description) object To provide broader description of an configuration page tabs* array To specify a list of tab."},{"location":"configurations/#tabs-properties","title":"Tabs properties","text":"Property Type Description name* string To define the particular tab name. title* string To show the title of the tab. entity* array A list of fields and their properties. table object To display accounts stanza in table style string By specifying this property in the global config file, the forms can either be opened as a new page or in a dialog. Supported values are \u201cpage\u201d or \u201cdialog\u201d.  Default value is dialog. options object This property allows you to enable the saveValidator feature. hook object It is used to add custom behaviour to forms. Visit the Custom Hook page to learn more. warning object It is used to add custom warning message for each of modes (\u2018create\u2019, \u2018edit\u2019, \u2018config\u2019, \u2018clone\u2019), message is displayed on form conf string TBD restHandlerName string TBD restHandlerModule string TBD restHandlerClass string TBD customTab Object This property allows you to enable the custom tab feature."},{"location":"configurations/#usage","title":"Usage","text":"<pre><code>\"configuration\": {\n    \"title\": \"Configuration\",\n    \"description\": \"Set up your add-on\",\n    \"tabs\": [\n        {\n            \"name\": \"account\",\n            \"title\": \"Account\"\n            \"table\": {},\n            \"entity\": []\n        },\n        {\n            \"name\": \"proxy\",\n            \"title\": \"Proxy\"\n            \"entity\": [],\n            \"options\": {\n                \"saveValidator\": \"\"\n            },\n        }\n    ]\n}\n</code></pre>"},{"location":"configurations/#output","title":"Output","text":"<p>This is how table looks in the UI:</p> <p></p> <p>This is how form looks in the UI:</p> <p></p>"},{"location":"contributing/","title":"Contributing Guidelines","text":""},{"location":"contributing/#development-flow","title":"Development flow","text":"<ul> <li>Default development branch is <code>develop</code>. Please use it when creating PRs with your features, fixes, documentation updates etc. PRs to <code>develop</code> branch should be merged using squash option in GitHub.</li> <li>When the release time comes (should be handled by UCC team) - create a PR from <code>develop</code> to <code>main</code><ul> <li>make sure that CI is passing and wait for the review from the team</li> <li>PR should be merged using merge commit option in GitHub</li> <li>release will be made automatically (both GitHub and PyPI) and bot will push a commit to <code>main</code> with all necessary changes (i.e. like this)</li> <li>after release is done - you need to backport bot\u2019s changes to the <code>develop</code> branch (i.e. #974)</li> </ul> </li> <li>If release did not go well and a quick bug fix needs to be released (should be handled by UCC team)<ul> <li>create a PR to <code>main</code> branch with a fix (with tests reproducing and then fixing the issue)</li> <li>make sure that CI is passing and wait for the review from the team</li> <li>PR should be merged using merge commit option in GitHub</li> <li>bug fix PR needs to be backported back to <code>develop</code> branch</li> </ul> </li> </ul>"},{"location":"contributing/#build-and-test","title":"Build and Test","text":"<p>Prerequisites: - Node.js LTS version (NodeJS or use nvm) - Yarn Classic (<code>npm install --global yarn</code>) - Poetry 1.5.1. Installation guide</p> <p>If you are interested in contributing to UI, <code>ui</code> folder has separate README.md.</p> <p>Building UI in <code>ui/dist</code> folder and copying files to static folder of UCC.</p> <pre><code>./build-ui.sh\n</code></pre> <p>Building a new local version of <code>ucc-gen</code>:</p> <pre><code>poetry build\n</code></pre>"},{"location":"contributing/#unit-tests","title":"Unit tests","text":"<pre><code>poetry run pytest tests/unit\n</code></pre>"},{"location":"contributing/#ui-tests","title":"UI tests","text":"<p>If you need to run UI tests for the PR, please add a label \u201crun-ui-tests\u201d (do this before PR is created).  UI tests will run automatically for any PR towards <code>main</code> / <code>develop</code> branches and on the <code>main</code> / <code>develop</code> branch as well. </p> <ol> <li>With local version of ucc-gen create UCCExample TA to output directory:     <code>poetry run ucc-gen build --source tests/testdata/test_addons/package_global_config_everything/package</code></li> <li>Install docker and run containerized Splunk Enterprise using script:     <code>./run_splunk.sh</code>    There are mapped default Splunk ports to host. To use different configuration see docker-splunk. Remember to mount output package to Splunk apps directory.</li> <li>Install any browser and specific to this browser driver such as chromedriver for Chrome.</li> <li>Run tests using command:     <code>poetry run pytest tests/ui</code>    Default test parameters are using Splunk connection details and credentials from earlier step and <code>chromedriver</code> is used as a default webdriver.    To use different browser or Splunk configuration set proper parameters according to the smartx-ui-test-library documentation.</li> </ol>"},{"location":"contributing/#linting-and-type-checking","title":"Linting and Type-checking","text":"<p><code>ucc-gen</code> uses <code>pre-commit</code> framework for linting and type-checking. Consult with <code>pre-commit</code> documentation about what is the best way to install the software.</p> <p>To run it locally:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#documentation-changes","title":"Documentation changes","text":"<p>Documentation changes are also welcome!</p> <p>To verify changes locally:</p> <pre><code>poetry run mkdocs serve\n</code></pre>"},{"location":"contributing/#issues-and-bug-reports","title":"Issues and bug reports","text":"<p>If you\u2019re seeing some unexpected behavior with <code>ucc-gen</code>, please create an issue on GitHub. You can click on \u201cNew Issue\u201d and use the template provided.</p>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>We love to see pull requests!</p> <p>We are using conventional commits. Two most important \u201ctypes\u201d: \u201cfix\u201d and \u201cfeat\u201d would result in the new version of the <code>ucc-gen</code> once merged.</p> <p>Do the changes you think are needed, run the steps above (build / test / linting / documentation). After you create a PR, all the needed reviewers will be added automatically by GitHub.</p> <p>Gotcha: <code>semgrep</code> and <code>fossa</code> steps may fail if you are an external contributor, this is expected for now.</p>"},{"location":"dashboard/","title":"Dashboard","text":"<p>UCC introduces a support for a dashboard page (available from v5.27.0). The dashboard page configuration is generated if <code>ucc-gen init</code> command is used. The dashboard page is optional, you can delete it from configuration if you don\u2019t need it in your add-on.</p> <p>The dashboard page provides some additional information about the add-on operations to increase the visibility into what is add-on is actually doing under the hood.</p> <p>As of now, 3 pre-built panels are supported:</p> <ul> <li>Add-on version</li> <li>Events ingested by sourcetype</li> <li>Errors in the add-on</li> </ul> <p>Note: if you change the dashboard page (Edit button) after the add-on is installed, the changes go to <code>local</code> folder, and you will see your version of the dashboard even if you update an add-on.</p> <p>To be able to add a dashboard page to an existing add-on, you need to adjust your  globalConfig file and include a new page \u201cdashboard\u201d there. Here is an example:</p> <pre><code>{\n\"pages\": {\n\"configuration\": {\n\"tabs\": [\n...\n],\n\"title\": \"Configuration\",\n\"description\": \"Set up your add-on\"\n},\n\"inputs\": {\n\"services\": [\n...\n],\n\"title\": \"Inputs\",\n\"description\": \"Manage your data inputs\",\n\"table\": {\n...\n}\n},\n\"dashboard\": {\n\"panels\": [\n{\n\"name\": \"addon_version\"\n},\n{\n\"name\": \"events_ingested_by_sourcetype\"\n},\n{\n\"name\": \"errors_in_the_addon\"\n}\n]\n}\n},\n\"meta\": {\n...\n}\n}\n</code></pre>"},{"location":"dashboard/#add-on-version","title":"Add-on version","text":"<p>Executes the following search:</p> <pre><code>| rest services/apps/local/&lt;addon_name&gt; splunk_server=local | fields version\n</code></pre> <p>Note:  is being replaced by the actual value during the build time."},{"location":"dashboard/#events-ingested-by-sourcetype","title":"Events ingested by sourcetype","text":"<p>Executes the following search:</p> <pre><code>index=_internal source=*&lt;addon_name&gt;* action=events_ingested\n| timechart avg(n_events) by sourcetype_ingested\n</code></pre> <p>Note:  is being replaced by the actual value during the build time. <p>This search assumes specific data format in the internal logs to fill the panel with data.</p> <p>It\u2019s recommended to utilize <code>solnlib.log</code>\u2019s <code>events_ingested</code> function.</p>"},{"location":"dashboard/#errors-in-the-add-on","title":"Errors in the add-on","text":"<p>Executes the following search:</p> <pre><code>index=_internal source=*&lt;addon_name&gt;* ERROR\n</code></pre> <p>Note:  is being replaced by the actual value during the build time. <p></p>"},{"location":"dashboard/#custom-components","title":"Custom components","text":"<p>UCC also supports adding your own components to the dashboard.  To do this, create a dashboard_components.xml file in the add-on\u2019s root directory (at the same level as globalConfig.json).  The correct structure of this file is a root tag called custom-dashboard and child elements called row, any other child tags will break the build process. Inside the row tags you can specify your panels. </p> <p>For more information about xml structure and element hierarchy see.</p> <p>Please note that this autogenerated dashboard also supports dynamic setting of data range <code>&lt;input type=\"time\" token=\"log_time\"&gt;</code>. If you want to use a dynamic data range in your panels, you must reference the <code>log_time</code> token.</p> <pre><code>          &lt;earliest&gt;$log_time.earliest$&lt;/earliest&gt;\n&lt;latest&gt;$log_time.latest$&lt;/latest&gt;\n</code></pre> <p></p> <p>dashboard_components.xml location:</p> <pre><code>&lt;TA&gt;\n\u251c\u2500\u2500 package\n...\n\u251c\u2500\u2500 dashboard_components.xml\n\u251c\u2500\u2500 globalConfig.json\n...\n</code></pre> <p>sample dashboard_components.xml structure:</p> <pre><code>&lt;custom-dashboard&gt;\n&lt;row&gt;\n&lt;panel&gt;\n&lt;title&gt;MY PANEL IN ROW 1&lt;/title&gt;\n&lt;chart&gt;\n&lt;search&gt;\n&lt;query&gt;index=_internal\n                    &lt;/query&gt;\n&lt;earliest&gt;0&lt;/earliest&gt;\n&lt;latest&gt;now&lt;/latest&gt;\n&lt;/search&gt;\n&lt;/chart&gt;\n&lt;/panel&gt;\n&lt;panel&gt;\n&lt;title&gt;MY SECOND PANEL IN ROW 1&lt;/title&gt;\n&lt;chart&gt;\n&lt;search&gt;\n&lt;query&gt;index=_internal&lt;/query&gt;\n&lt;earliest&gt;-14d@d&lt;/earliest&gt;\n&lt;latest&gt;&lt;/latest&gt;\n&lt;sampleRatio&gt;1&lt;/sampleRatio&gt;\n&lt;/search&gt;\n&lt;/chart&gt;\n&lt;/panel&gt;\n&lt;/row&gt;\n&lt;row&gt;\n&lt;panel&gt;\n&lt;title&gt;MY PANEL IN ROW 2&lt;/title&gt;\n&lt;chart&gt;\n&lt;search&gt;\n&lt;query&gt;index=_internal&lt;/query&gt;\n&lt;earliest&gt;$log_time.earliest$&lt;/earliest&gt;\n&lt;latest&gt;$log_time.latest$&lt;/latest&gt;\n&lt;/search&gt;\n&lt;/chart&gt;\n&lt;/panel&gt;\n&lt;/row&gt;\n&lt;/custom-dashboard&gt;\n</code></pre> <p>Next you have to add custom panel to your dashboard page in globalConfig.json.  The order of panels in the globalConfig corresponds to the order of rows on the dashboard.</p> <pre><code>{\n...\n\"dashboard\": {\n\"panels\": [\n{\n\"name\": \"addon_version\"\n},\n{\n\"name\": \"events_ingested_by_sourcetype\"\n},\n{\n\"name\": \"errors_in_the_addon\"\n},\n{\n\"name\": \"custom\"\n}\n]\n}\n...\n}\n</code></pre>"},{"location":"dot_conf_files/","title":".conf files","text":"<p><code>ucc-gen</code> generates the following <code>.conf</code> files in the <code>default</code> directory. If any of the <code>.conf</code> file is present in the source directory, <code>ucc-gen</code> will just copy the file to the output folder. The only exception is <code>app.conf</code> file.</p> <p>Note: for most of the use cases, generated configuration is sufficient, if you need to adjust the file which being generated, please ping us for a feature  request or create a file in the <code>default</code> location, so it will be taken  instead of being generated. </p>"},{"location":"dot_conf_files/#appconf","title":"<code>app.conf</code>","text":"<p><code>ucc-gen</code> will merge the file present in the <code>default</code> folder with some  additional information generated during the build time. But if you don\u2019t need  anything specific, you don\u2019t need to have <code>app.conf</code> in the source folder. </p> <p>It uses <code>app.manifest</code> file to determine add-on description, add-on name, add-on title and add-on author (taking first one if multiple defined). Make sure that your <code>app.manifest</code> is up-to-date, so <code>app.conf</code> will have relevant information as well.</p> <p>Also, <code>triggers</code> stanza will be created by <code>ucc-gen</code>, it will determine what  are the <code>.conf</code> files used in the add-on and generates the relevant key-value  pairs.</p>"},{"location":"dot_conf_files/#inputsconf","title":"<code>inputs.conf</code>","text":"<p><code>ucc-gen</code> will generate a stanza for every input defined in the <code>globalConfig</code>  file and set <code>python.version</code> to <code>python3</code>.</p>"},{"location":"dot_conf_files/#serverconf","title":"<code>server.conf</code>","text":"<p><code>ucc-gen</code> will generate <code>shclustering</code> stanza, it will determine what are the  <code>.conf</code> files used in the add-on and generates the relevant key-value pairs.</p>"},{"location":"dot_conf_files/#webconf","title":"<code>web.conf</code>","text":"<p><code>ucc-gen</code> will generate all needed information about the endpoints being exposed from the add-on.</p>"},{"location":"dot_conf_files/#restmapconf","title":"<code>restmap.conf</code>","text":"<p><code>ucc-gen</code> will generate all needed information about the configuration of every endpoint.</p>"},{"location":"openapi/","title":"OpenAPI description document","text":"<p>OpenAPI\u2019s description document is generated with <code>ucc-gen</code> command.  There has to be defined valid <code>globalConfig.json</code> and <code>app.manifest</code> to have the document (<code>appserver/static/openapi.json</code> file) generated.</p>"},{"location":"openapi/#how-to-find-the-document","title":"How to find the document?","text":"<p>Once <code>ucc-gen</code> command is executed, OpenAPI description document is located in output <code>appserver/static</code> subdirectory.</p> <p>One of ways is to download it via button displayed in top right corner of configuration page.</p> <p>When add-on is installed to Splunk instance, it is exposed via web and management interface, so is available under following addresses accordingly:</p> <ul> <li>[protocol]://[domain]:[port]/en-GB/splunkd/__raw/servicesNS/[user]/[appname]/static/openapi.json</li> </ul> <p>(eg. http://localhost:8000/en-GB/splunkd/__raw/servicesNS/admin/Splunk_TA_cisco_meraki/static/openapi.json)</p> <ul> <li>https://[domain]:[port]/servicesNS/[user]/[appname]/static/openapi.json</li> </ul> <p>(eg. https://localhost:8089/servicesNS/admin/Splunk_TA_cisco_meraki/static/openapi.json)</p> <p>All security rules are applied so user has to be authenticated and authorised to be able to have access to the document.</p> <p>See the following resources for more information on working with the Splunk REST API (eg. how to authenticate):</p> <ul> <li>REST API User Manual</li> <li>REST API Tutorials</li> </ul>"},{"location":"openapi/#where-it-can-be-used","title":"Where it can be used?","text":"<p>OpenAPI Description document can be used to create:</p> <ul> <li>interactive documentation that generates simple curl requests to all documented endpoints (check this section for relevant instruction)</li> <li>automation that uses the simple requests to create more complex solutions such as:<ul> <li>orchestration</li> <li>mass load or migration</li> <li>automated tests</li> </ul> </li> </ul> <p>Check swagger or other tools for more possibilities.</p>"},{"location":"openapi/#how-to-get-curl-commands-and-use-them","title":"How to get curl commands and use them?","text":""},{"location":"openapi/#prerequisites","title":"Prerequisites","text":"<ul> <li>docker running</li> <li>Splunk with your add-on installed</li> </ul>"},{"location":"openapi/#instruction","title":"Instruction","text":"<ol> <li>Run in terminal: <code>docker run -p 8081:8080 swaggerapi/swagger-editor</code></li> <li>Open SwaggerEditor in web browser (http://localhost:8081/) and load the OpenAPI description document (File &gt; Import file)</li> <li>Check domain and port values for your Splunk instance and Authorize</li> <li>Select method-path pair (eg. GET - /splunk_ta_snow_settings/logging ) and \u201cTry it out\u201d</li> <li>Define parameters and \u201cExecute\u201d</li> <li>Copy curl value, paste to your terminal, ADD <code>-k</code> PARAMETER, and run</li> </ol> <p>Note: Check Swagger Editor documentation in case of any question related to the tool</p>"},{"location":"openapi/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>SSL certificate problem</li> </ul> <p>Are you sure you added <code>-k</code> parameter to curl command?</p> <ul> <li>Unauthorized</li> </ul> <p>Make sure you clicked Authorize button, gave username and password and clicked Authorize</p>"},{"location":"openapi/#how-to-generate-python-client-and-use-it","title":"How to generate Python client and use it?","text":""},{"location":"openapi/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Docker running</li> <li>Python installed</li> <li>Splunk with your add-on installed</li> </ul>"},{"location":"openapi/#instruction_1","title":"Instruction","text":"<ol> <li>Create directory structure and open the <code>tmp</code> directory (run in terminal: <code>mkdir -p tmp/restapi_client ; mkdir -p tmp/generator ; cd tmp</code>)</li> <li>Save your openapi.json file to the directory</li> <li>Download the rest.mustache file (<code>wget https://raw.githubusercontent.com/swagger-api/swagger-codegen/master/modules/swagger-codegen/src/main/resources/python/rest.mustache</code>)</li> <li>Splunk does not expect body for DELETE requests, so we need to revert modifications done for https://github.com/swagger-api/swagger-codegen/issues/9558 (<code>sed \"s/request_body[[:blank:]]=[[:blank:]]\\'{}\\'/request_body = None/g\" rest.mustache &gt; generator/rest.mustache</code>). If you want to understand exactly which line of rest.mustache is affected: https://github.com/swagger-api/swagger-codegen/blob/master/modules/swagger-codegen/src/main/resources/python/rest.mustache#L150</li> <li>Create client (<code>docker run --rm -v ${PWD}:/local swaggerapi/swagger-codegen-cli-v3 generate -i /local/openapi.json -l python -o /local/restapi_client -t /local/generator/</code>); it should appear in <code>restapi_client</code> directory</li> <li>Open <code>restapi_client</code> directory and read <code>README.md</code> to find out the details of how the client should be installed, imported and used. (<code>cd restapi_client ; more README.md</code>)</li> <li>Install the client (<code>python setup.py install --user</code>)</li> <li>You can use below code as an inspiration for your own script that imports the client and uses for TA configuration</li> </ol> <pre><code>from __future__ import print_function\nimport os\nimport swagger_client\nfrom swagger_client.rest import ApiException\nfrom pprint import pprint\n\ndef get_from_environment_variable(environment_variable: str) -&gt; str:\n    if environment_variable not in os.environ:\n        print(40*'*')\n        print(f\"{environment_variable} environment variable not set\")\n        print(\"run below in terminal:\")\n        print(f\"export {environment_variable}=[your value]\")\n        print(40*'*')\n        exit(1)\n    return os.environ[environment_variable]\n\nconfiguration = swagger_client.Configuration()\nconfiguration.host = configuration.host.replace('{domain}','localhost')\nconfiguration.host = configuration.host.replace('{port}','8089')\n\nconfiguration.verify_ssl = False\nconfiguration.username = get_from_environment_variable(\"SPLUNK_USERNAME\")\nconfiguration.password = get_from_environment_variable(\"SPLUNK_PASSWORD\")\n\napi_instance = swagger_client.DefaultApi(swagger_client.ApiClient(configuration))\n\noutput_mode = 'json'\n</code></pre>"},{"location":"openapi/#troubleshooting_1","title":"Troubleshooting","text":"<ul> <li>swaggerapi/swagger-codegen-cli-v3 docker image does not work on ARM platforms (eg. M-based Mac machines)</li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>You need to have Python 3.7+ and Git available in the machine to be able to utilize <code>ucc-gen</code> command.</p> <p>Git is used to generate the add-on version from Git tags. Alternatively you can use <code>--ta-version</code> parameter. More info below.</p> <p>To be able to create an add-on using UCC framework, you need to have at least:</p> <ul> <li><code>globalConfig</code> file (in <code>JSON</code> or <code>YAML</code> format, <code>JSON</code> is mostly used)</li> <li><code>package</code> folder</li> <li><code>app.manifest</code> in the <code>package</code> folder (documentation here).</li> </ul> <p><code>app.manifest</code> file now is being validated according to the documentation here.</p> <p>If both globalConfig.json and globalConfig.yaml files are present, then the globalConfig.json file will take precedence.</p> <p>The JSON schema for the <code>globalConfig</code> file can be found in <code>splunk_add_on_ucc_framework/schema/schema.json</code> file.</p>"},{"location":"quickstart/#add-on-naming-convention","title":"Add-on naming convention","text":"<p>Refer to Splunkbase documentation  here  to figure out what should be the name of your add-on.</p>"},{"location":"quickstart/#initialize-new-add-on","title":"Initialize new add-on","text":"<p>Initialization of the new add-on is available from <code>5.19.0</code> version of <code>ucc-gen</code>.</p> <p>Commands below are macOS and Linux specific.</p> <ul> <li>Set up and activate Python virtual environment</li> </ul> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <ul> <li>Install <code>splunk-add-on-ucc-framework</code></li> </ul> <pre><code>pip install splunk-add-on-ucc-framework\n</code></pre> <ul> <li>Initialize new add-on</li> </ul> <pre><code>ucc-gen init --addon-name \"demo_addon_for_splunk\" --addon-display-name \"Demo Add-on for Splunk\" --addon-input-name demo_input\n</code></pre> <p>The new add-on is located in <code>demo_addon_for_splunk</code> folder and can be built using  the commands below.</p>"},{"location":"quickstart/#build-already-existing-add-on","title":"Build already existing add-on","text":"<p>Commands below are macOS and Linux specific.</p> <ul> <li>Set up and activate Python virtual environment (skip if you already have an environment)</li> </ul> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <ul> <li>Install <code>splunk-add-on-ucc-framework</code> and <code>splunk-packaging-toolkit</code> (skip if you already installed libraries)</li> </ul> <pre><code>pip install splunk-add-on-ucc-framework splunk-packaging-toolkit\n</code></pre> <p>Note: <code>splunk-packaging-toolkit</code> does not work with Python 3.10+.</p> <p>Note: <code>ucc-gen package</code> can be used instead of <code>slim</code> if UCC <code>v5.30.0+</code> is used (more details below). </p> <ul> <li>Run <code>ucc-gen build</code> and package it</li> </ul> <p>Provide <code>--ta-version=&lt;version&gt;</code> parameter if this repository is not version controlled.</p> <pre><code>ucc-gen build\nslim package output/&lt;add-on-name&gt;\n</code></pre> <p>Please use <code>ucc-gen build</code> instead of <code>ucc-gen</code> if you are using UCC <code>v5.19.0</code> and higher.</p> <p>Now you should see an archive created in the same level as your <code>globalConfig.json</code> is located.</p> <p>Now you can go to Splunk and install this add-on using the generated archive.</p> <p>After validating that the add-on was loaded fine and all the basic operations  are working, you can extend the functionality of the input by copying and  pasting the automatically generated modular inputs file into <code>package/bin</code>  folder and extending their functionality. The generated inputs are using  Splunk SDK for Python. After you update the modular input code, you can run <code>ucc-gen</code> again and <code>ucc-gen</code> will  use updated modular inputs from <code>package/bin</code> instead of generating new ones.</p>"},{"location":"quickstart/#commands","title":"Commands","text":""},{"location":"quickstart/#ucc-gen-build","title":"<code>ucc-gen build</code>","text":"<p>Builds the add-on. As of now, running <code>ucc-gen</code> does the same thing as running <code>ucc-gen build</code>,  but eventually calling <code>ucc-gen</code> without specifying a subcommand will be  deprecated.</p> <p>It takes the following parameters:</p> <ul> <li><code>--source</code> - [optional] folder containing the <code>app.manifest</code> and app      source. Default: <code>package</code>.</li> <li><code>--config</code> - [optional] path to the configuration file, defaults to     globalConfig file in the parent directory of source provided.</li> <li><code>--ta-version</code> - [optional] override current version of TA, default     version is version specified in <code>globalConfig.json</code> or <code>globalConfig.yaml</code>.      Splunkbase compatible version of SEMVER will be used by default.</li> <li><code>-o</code> / <code>--output</code> - [optional] output folder to store build add-on in.     By default, it will be saved in the <code>current directory/output</code> folder.     Accepts absolute paths as well.</li> <li><code>--python-binary-name</code> - [optional] Python binary name to use when     installing Python libraries. Default: <code>python3</code>.</li> <li><code>-v</code> / <code>--verbose</code> - [optional] show detailed information about     created/copied/modified/conflict files after build is complete.     This option is in experimental mode. Default: <code>False</code>.</li> </ul>"},{"location":"quickstart/#verbose-mode","title":"Verbose mode","text":"<p>Available from <code>v5.35.0</code>.</p> <p>Running <code>ucc-gen build -v</code> or <code>ucc-gen build --verbose</code> prints additional information about what was exactly created / copied / modified / conflict after the build is complete. It does not scan <code>lib</code> folder due to the nature of the folder.</p> <p>Below is the explanation on what exactly each state means:</p> <ul> <li><code>created</code> - file is not in the original package and was created during the build process</li> <li><code>copied</code> - file is in the original package and was copied during the build process</li> <li><code>modified</code> - file is in the original package and was modified during the build process</li> <li><code>conflict</code> - file is in the original package and was copied during the build process but may be generated by UCC itself so incorrect usage can lead to not working add-on</li> </ul>"},{"location":"quickstart/#ucc-gen-init","title":"<code>ucc-gen init</code>","text":"<p>Initializes the add-on (available from <code>v5.19.0</code>). <code>ucc-gen init</code> command initializes the add-on and bootstraps some code in the  modular input which you, as a developer, can extend for your needs.</p> <p>Apart from standard files needed for the add-on, it also adds search head  clustering files in <code>default/server.conf</code> file and reload triggers in  <code>default/app.conf</code> file. Those files will be generated automatically soon by  <code>ucc-gen build</code> command itself, for now you need to include them manually  during the add-on development.</p> <p>It takes the following parameters:</p> <ul> <li><code>--addon-name</code> - [required] add-on name. Consult with      official naming convention guide.</li> <li><code>--addon-rest-root</code> - [optional] add-on REST root, defaults to <code>--addon-name</code> if not provided. </li> <li><code>--addon-display-name</code> - [required] add-on \u201cofficial\u201d name.</li> <li><code>--addon-input-name</code> - [required] name of the generated input. </li> <li><code>--addon-version</code> - [optional] version of the generated add-on, <code>0.0.1</code> by default.</li> <li><code>--overwrite</code> - [optional] overwrites already existing folder if used,      by default you can\u2019t generate a new add-on to already existing folder.</li> </ul>"},{"location":"quickstart/#ucc-gen-import-from-aob","title":"<code>ucc-gen import-from-aob</code>","text":"<p>Import from AoB (Add-on Builder) (available from <code>v5.24.0</code>). It is in the experimental state as of now, meaning that running this command may not produce 100% UCC compatible add-on, but we are going to work on future improvements for the script itself.</p> <p>Note: <code>import-from-aob</code> command does not support Windows as of now.</p> <p>The import functionality is based on the  ucc_migration_test bash script. One of the ways you can use it is to download an AoB-based add-on from Splunkbase, unarchive it and use  <code>ucc-gen import-from-aob --addon-name &lt;unarchived-folder-name&gt;</code>. Or you can run the same command against your locally developed add-on, but it should be exported from AoB.</p> <p>It takes the following parameters:</p> <ul> <li><code>--addon-name</code> - [required] add-on name.</li> </ul>"},{"location":"quickstart/#ucc-gen-package","title":"<code>ucc-gen package</code>","text":"<p>Available from <code>v5.30.0</code>. Packages the add-on so it can be installed.  It mimics the basics of the <code>slim package</code> command. This command can be used for most of the simple cases.</p> <p>It does not support:</p> <ul> <li><code>.slimignore</code> file</li> <li>dependencies section</li> </ul> <p>It takes the following parameters:</p> <ul> <li><code>--path</code> - [required] path to the built add-on (should include <code>app.manifest</code> file).</li> <li><code>-o</code> / <code>--output</code> - [optional] output folder to store packaged add-on in.     By default, it will be saved in the <code>current directory</code> folder.     Accepts absolute paths as well.</li> </ul>"},{"location":"quickstart/#what-ucc-gen-build-does","title":"What <code>ucc-gen build</code> does","text":"<ul> <li>Cleans the output folder.</li> <li>Retrieves the package ID of addon.</li> <li>Copies UCC template directory under <code>output/&lt;package_ID&gt;</code> directory.</li> <li>Copies globalConfig.json or globalConfig.yaml file to     <code>output/&lt;package_ID&gt;/appserver/static/js/build</code> directory.</li> <li>Collects and install Addon\u2019s requirements into     <code>output/&lt;package_ID&gt;/lib</code> directory of addon\u2019s package.</li> <li>For the addon\u2019s requirements, packages are installed according to     following table:<ul> <li><code>lib/requirements.txt</code> - install Python3 compatible packages into     <code>output/&lt;package_ID&gt;/lib</code></li> <li>Removes <code>setuptools*</code>, <code>bin*</code>, <code>pip*</code>, <code>distribute*</code>, <code>wheel*</code> if      they exist from <code>output/&lt;package_ID&gt;/lib</code></li> <li>Removes execute bit from every file under <code>output/&lt;package_ID&gt;/lib</code></li> </ul> </li> <li>Replaces tokens in views.</li> <li>Copies addon\u2019s <code>package/*</code> to <code>output/&lt;package_ID&gt;/*</code> directory.</li> <li>If an addon requires some additional configurations in packaging     then <code>ucc-gen</code> runs the code in the <code>additional_packaging.py</code> file as well.</li> </ul>"},{"location":"table/","title":"Table","text":"<p>This is a common feature that is used to display the account and input stanzas on the Inputs and Configuration pages, respectively.</p> <p>Tables include many built-in features such as sorting, filtering, and pagination.</p>"},{"location":"table/#properties","title":"Properties","text":"<ul> <li><code>header</code>* - (Array Objects) To specify the list of columns in the table.<ul> <li><code>field</code>* - The name of the field from which the data in this column will be displayed.</li> <li><code>label</code>* - Title of the column.</li> <li>mapping - It is used to map field values to more meaningful values.</li> <li>customCell - It is used to modify default cell values.</li> </ul> </li> <li><code>actions</code>* - (Array) To specify what type of action can be performed on that stanza. Supported types are <code>edit</code>, <code>clone</code> and <code>delete</code>.</li> <li><code>moreInfo</code> - (Array Objects) To specify the list of fields that will be displayed in row form when the user clicks the Row Expand button.<ul> <li><code>field</code> - Used to dispaly the data in a column.</li> <li><code>label</code> - Title of the column.</li> <li>mapping - It is used to map field values to more meaningful values.</li> </ul> </li> <li>customRow - This can be used to customise the moreInfo Component.</li> </ul>"},{"location":"table/#list-of-built-in-table-fields-for-modular-input","title":"List of built-in table fields for Modular Input","text":"<p>If your add-on has multiple modular inputs and you want to show the input type of each one, use the in-built field below.</p> Field Name description serviceName It indicates the name of the Input service to be displayed in the table. Eg: example_input_one serviceTitle It indicates the title of the Input service to be displayed in the table. Eg: Example Input One"},{"location":"table/#usage","title":"Usage","text":"<pre><code>\"table\": {\n\"header\": [\n{\n\"label\": \"Name\",\n\"field\": \"name\"\n},\n{\n\"label\": \"Account\",\n\"field\": \"account\"\n},\n{\n\"label\": \"Input Type\",\n\"field\": \"serviceTitle\"\n},\n{\n\"label\": \"Status\",\n\"field\": \"disabled\"\n}\n],\n\"moreInfo\": [\n{\n\"label\": \"Name\",\n\"field\": \"name\"\n},\n{\n\"label\": \"Interval\",\n\"field\": \"interval\"\n},\n{\n\"label\": \"Index\",\n\"field\": \"index\"\n},\n{\n\"label\": \"Status\",\n\"field\": \"disabled\",\n\"mapping\": {\n\"true\": \"Disabled\",\n\"false\": \"Enabled\"\n}\n},\n{\n\"label\": \"Example Account\",\n\"field\": \"account\"\n}\n],\n\"actions\": [\"edit\", \"enable\", \"delete\", \"clone\"]\n}\n</code></pre>"},{"location":"table/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting","title":"General troubleshooting","text":"<p>To be able to troubleshoot the Python part of the add-on, you can use <code>remote_pdb</code>. This can be used for the local development when you have locally installed Splunk instance and add-on there.s</p> <p>Steps to set up:</p> <ul> <li>Put this file to the <code>bin</code> folder</li> <li>Put this line (<code>import remote_pdb; remote_pdb.RemotePdb(host=\"0.0.0.0\", port=4444).set_trace()</code>) before the line that needs troubleshooting</li> <li>Go to the console and run <code>telnet 127.0.0.1 4444</code> and it will open a <code>pdb</code> console when you can start the troubleshooting. Refer to <code>pdb</code> documentation on the commands available</li> </ul>"},{"location":"troubleshooting/#splunk-calls-your-modular-input-only-once","title":"Splunk calls your modular input only once","text":"<p>In case Splunk calls your modular input only once however you are specifying an interval within it should call your script - check <code>use_single_instance</code> variable in <code>get_scheme</code> method of your modular input class. It should be set False so that Splunk can schedule the input accordingly.</p> <p>To be able to understand that Splunk does not schedule your modular input script, search for \u201cindex=_internal ExecProcessor\u201d and look for \u201cinterval: run once\u201d near your script name.</p>"},{"location":"troubleshooting/#modulenotfounderror-no-module-named-library-name","title":"ModuleNotFoundError: No module named \u2018&lt;library-name&gt;\u2018","text":"<p>If you see this message in Splunk when your modular input is being run, it means that Splunk could not find a library you are trying to import.</p> <p>It can be because of:</p> <ul> <li>there is no such library in the <code>package/lib</code> folder -&gt; you need to check your <code>package/lib/requirements.txt</code> file to make sure that you have it as part of the requirements</li> <li>there is no <code>import import_declare_test</code> at the top of your modular input file -&gt; add the import mentioned to the top of your modular input file</li> </ul>"},{"location":"troubleshooting/#urllib3-2","title":"urllib3 &gt;= 2","text":"<p>If you are getting an error (in <code>splunkd.log</code>)</p> <pre><code>ImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with OpenSSL 1.0.2k-fips  26 Jan 2017.\nSee: https://github.com/urllib3/urllib3/issues/2168\n</code></pre> <p>when your modular input is running, you need to use <code>urllib3 &lt; 2</code> in your <code>requirements.txt</code> file. </p>"},{"location":"troubleshooting/#compare-add-ons-generated-by-2-different-versions-of-the-ucc-gen-build","title":"Compare add-ons generated by 2 different versions of the <code>ucc-gen build</code>","text":"<p><code>scripts</code> folder has a script <code>compare_different_ucc_versions_output.sh</code> which can be used to compare the output of the add-on built by 2 different versions of the <code>ucc-gen build</code> command.</p> <p>To be able to run it, copy the script to the add-on folder, read the instructions in the script itself. If it does not work for your particular case, feel free to adjust it yourself or file a feature request for us to improve something.</p>"},{"location":"ucc_related_libraries/","title":"UCC-related libraries","text":"<p>There are two UCC-related libraries:</p> <ul> <li><code>solnlib</code></li> <li><code>splunktaucclib</code></li> </ul>"},{"location":"ucc_related_libraries/#solnlib","title":"<code>solnlib</code>","text":"<p><code>solnlib</code> contains a number of functions and classes that can be used during the add-on development. The documentation can be found here.</p> <p>Commonly used modules are:</p> <ul> <li><code>log</code> - file-based logging to <code>$SPLUNK_HOME/var/log/splunk</code> folder</li> <li><code>modular_input.checkpointers</code> - contains classes to manage checkpoints</li> </ul> <p>Below is the example of the code that can be used to get a logger for a specific add-on.</p> <pre><code>import logging\n\nfrom solnlib import log\n\n\ndef logger_for_input(input_name: str) -&gt; logging.Logger:\n    return log.Logs().get_logger(f\"&lt;add-on name&gt;_{input_name}\")\n</code></pre>"},{"location":"ucc_related_libraries/#splunktaucclib","title":"<code>splunktaucclib</code>","text":"<p><code>splunktaucclib</code> powers backend of the add-on.</p>"},{"location":"uccignore/","title":"<code>.uccignore</code> file","text":"<p>This feature can be used to remove files from the output after UCC template files were copied and before the source of the  add-on recursively overrides the output folder.</p> <p>It is expected to be placed in the same folder as <code>globalConfig</code> file to have effect.</p> <p>You will see a warning message in case ignored file is not found in the output folder.</p>"},{"location":"advanced/custom_mapping/","title":"Custom Mapping","text":"<p>We can use this feature to map each field with meaningful value to display in the table. For example, The category field contains 1, 2, and 4 values, but when those values are displayed as it is then the user might get confused as those values do not signify the meaning of their mapping. To avoid this confusion user can map each field with meaningful value as shown in the example below.</p>"},{"location":"advanced/custom_mapping/#usage","title":"Usage","text":"<pre><code>{\n\"name\": \"account\",\n\"title\": \"Account\",\n\"table\": {\n\"header\": [\n{\n\"field\": \"name\",\n\"label\": \"Name\"\n},\n{\n\"field\": \"key_id\",\n\"label\": \"Key ID\"\n},\n{\n\"field\": \"category\",\n\"label\": \"Region Category\",\n\"mapping\": {\n\"1\": \"Global\",\n\"2\": \"US Gov\",\n\"4\": \"China\"\n}\n}\n],\n\"actions\": [\n\"edit\",\n\"delete\"\n]\n},\n\"entity\": [\n{\n\"field\": \"name\",\n\"label\": \"Name\",\n\"type\": \"text\",\n\"required\": true,\n},\n{\n\"field\": \"key_id\",\n\"label\": \"Key ID\",\n\"type\": \"text\",\n},\n{\n\"field\": \"category\",\n\"label\": \"Region Category\",\n\"type\": \"singleSelect\",\n\"required\": true,\n\"defaultValue\": 1,\n\"options\": {\n\"disableSearch\": true,\n\"autoCompleteFields\": [\n{\n\"label\": \"Global\",\n\"value\": 1\n},\n{\n\"label\": \"GovCloud\",\n\"value\": 2\n},\n{\n\"label\": \"China\",\n\"value\": 4\n}\n]\n}\n}\n]\n}\n</code></pre>"},{"location":"advanced/custom_mapping/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"advanced/custom_rest_handler/","title":"Custom REST Handlers","text":"<p>It is possible to extend the default behaviour of the UCC-generated REST handlers.</p> <p>For example, if your add-on requires an API key to operate and you want to validate this API key during its creation, you may want to use the custom REST handlers to achieve that.</p> <p>Note that <code>ucc-gen</code> will not override the REST handler code if you use correct file name under <code>bin</code> folder.</p> <p>Below there an example of how it can be done. It contains a REST handler for creating an organization with <code>organization_id</code> and <code>organization_api_key</code> fields, not custom one, just generated by <code>ucc-gen</code>.</p> <p>But below that there is a custom handler <code>CustomRestHandler</code> class which has additional steps for configuration creation and edit operations, specifically <code>handleEdit</code> and <code>handleCreate</code> methods.</p> <pre><code>import import_declare_test\n\nimport logging\n\nfrom splunktaucclib.rest_handler import admin_external, util\nfrom splunktaucclib.rest_handler.admin_external import AdminExternalHandler\nfrom splunktaucclib.rest_handler.endpoint import (\n    RestModel,\n    SingleModel,\n    field,\n    validator,\n)\n\nutil.remove_http_proxy_env_vars()\n\n\nfields = [\n    field.RestField(\n        \"organization_id\",\n        required=True,\n        encrypted=False,\n        default=None,\n        validator=validator.AllOf(\n            validator.String(\n                max_len=50,\n                min_len=1,\n            ),\n            validator.Pattern(\n                regex=r\"\"\"^\\d+$\"\"\",\n            ),\n        ),\n    ),\n    field.RestField(\n        \"organization_api_key\",\n        required=True,\n        encrypted=True,\n        default=None,\n        validator=validator.AllOf(\n            validator.String(\n                max_len=50,\n                min_len=1,\n            ),\n            validator.Pattern(\n                regex=r\"\"\"^[a-z0-9]+$\"\"\",\n            ),\n        ),\n    ),\n]\nmodel = RestModel(fields, name=None)\n\n\nendpoint = SingleModel(\n    \"addon_name_organization\", model, config_name=\"organization\"\n)\n\n\ndef _validate_organization(organization_id, organization_api_key):\n    # Some code to validate the API key.\n    # Should return nothing if the configuration is valid.\n    # Should raise an exception splunktaucclib.rest_handler.error.RestError if the configuration is not valid.\n    ...\n\n\nclass CustomRestHandler(AdminExternalHandler):\n    def __init__(self, *args, **kwargs):\n        AdminExternalHandler.__init__(self, *args, **kwargs)\n\n    def handleList(self, confInfo):\n        AdminExternalHandler.handleList(self, confInfo)\n\n    def handleEdit(self, confInfo):\n        _validate_organization(\n            self.payload.get(\"organization_id\"),\n            self.payload.get(\"organization_api_key\"),\n        )\n        AdminExternalHandler.handleEdit(self, confInfo)\n\n    def handleCreate(self, confInfo):\n        _validate_organization(\n            self.payload.get(\"organization_id\"),\n            self.payload.get(\"organization_api_key\"),\n        )\n        AdminExternalHandler.handleCreate(self, confInfo)\n\n    def handleRemove(self, confInfo):\n        AdminExternalHandler.handleRemove(self, confInfo)\n\n\nif __name__ == \"__main__\":\n    logging.getLogger().addHandler(logging.NullHandler())\n    admin_external.handle(\n        endpoint,\n        handler=CustomRestHandler,\n    )\n</code></pre>"},{"location":"advanced/custom_rest_handler/#native-support-from-ucc","title":"Native support from UCC","text":"<p>UCC 5.18.0 natively supports custom REST handlers for the modular inputs.</p> <p>One of the common scenarios is to delete a checkpoint after you are deleting an input in the Inputs page. Otherwise, users may face the wierd consequences if  they create an input with the same name as the input that was deleted and this  newly created input will be reusing the old checkpoint because the names of  the inputs are the same. We would like to avoid this situation in the add-on.</p> <p>This can be done without a need to modify the REST handler code generated  automatically by running <code>ucc-gen</code>.</p> <p>Below is the automatically generated REST handler code for a modular input REST  handler.</p> <pre><code>import import_declare_test\n\nfrom splunktaucclib.rest_handler.endpoint import (\n    field,\n    validator,\n    RestModel,\n    DataInputModel,\n)\nfrom splunktaucclib.rest_handler import admin_external, util\nfrom splunktaucclib.rest_handler.admin_external import AdminExternalHandler\nimport logging\n\nutil.remove_http_proxy_env_vars()\n\n\nfields = [\n    field.RestField(\n        'interval',\n        required=True,\n        encrypted=False,\n        default=None,\n        validator=validator.Pattern(\n            regex=r\"\"\"^\\-[1-9]\\d*$|^\\d*$\"\"\", \n        )\n    ),  \n\n    field.RestField(\n        'disabled',\n        required=False,\n        validator=None\n    )\n\n]\nmodel = RestModel(fields, name=None)\n\n\n\nendpoint = DataInputModel(\n    'example_input_one',\n    model,\n)\n\n\nif __name__ == '__main__':\n    logging.getLogger().addHandler(logging.NullHandler())\n    admin_external.handle(\n        endpoint,\n        handler=AdminExternalHandler,\n    )\n</code></pre> <p>New file needs to be created in the <code>bin</code> folder of the add-on. Let\u2019s call it  <code>splunk_ta_uccexample_delete_checkpoint_rh.py</code> (name can be different).</p> <p>And put the following content into the file.</p> <pre><code>import import_declare_test\n\nfrom splunktaucclib.rest_handler.admin_external import AdminExternalHandler\n\n\nclass CustomRestHandlerDeleteCheckpoint(AdminExternalHandler):\n    def __init__(self, *args, **kwargs):\n        AdminExternalHandler.__init__(self, *args, **kwargs)\n\n    def handleList(self, confInfo):\n        AdminExternalHandler.handleList(self, confInfo)\n\n    def handleEdit(self, confInfo):\n        AdminExternalHandler.handleEdit(self, confInfo)\n\n    def handleCreate(self, confInfo):\n        AdminExternalHandler.handleCreate(self, confInfo)\n\n    def handleRemove(self, confInfo):\n        # Add your code here to delete the checkpoint!\n        AdminExternalHandler.handleRemove(self, confInfo)\n</code></pre> <p>Then, in globalConfig file you need to change the behaviour of the UCC to reuse the REST handler that was just created.</p> <pre><code>{\n    \"name\": \"example_input_one\",\n    \"restHandlerModule\": \"splunk_ta_uccexample_delete_checkpoint_rh\",  &lt;----- new field\n    \"restHandlerClass\": \"CustomRestHandlerDeleteCheckpoint\",  &lt;----- new field\n    \"entity\": [\n        \"...\"\n    ],\n    \"title\": \"Example Input One\"\n}\n</code></pre> <p>After <code>ucc-gen</code> command is executed again, the generated REST handler for this input will be changed to the following.</p> <pre><code>import import_declare_test\n\nfrom splunktaucclib.rest_handler.endpoint import (\n    field,\n    validator,\n    RestModel,\n    DataInputModel,\n)\nfrom splunktaucclib.rest_handler import admin_external, util\nfrom splunk_ta_uccexample_delete_checkpoint_rh import CustomRestHandlerDeleteCheckpoint  # &lt;----- changed\nimport logging\n\nutil.remove_http_proxy_env_vars()\n\n\nfields = [\n    field.RestField(\n        'interval',\n        required=True,\n        encrypted=False,\n        default=None,\n        validator=validator.Pattern(\n            regex=r\"\"\"^\\-[1-9]\\d*$|^\\d*$\"\"\", \n        )\n    ),  \n\n    field.RestField(\n        'disabled',\n        required=False,\n        validator=None\n    )\n\n]\nmodel = RestModel(fields, name=None)\n\n\n\nendpoint = DataInputModel(\n    'example_input_one',\n    model,\n)\n\n\nif __name__ == '__main__':\n    logging.getLogger().addHandler(logging.NullHandler())\n    admin_external.handle(\n        endpoint,\n        handler=CustomRestHandlerDeleteCheckpoint,  # &lt;----- changed\n    )\n</code></pre>"},{"location":"advanced/dependent_dropdown/","title":"Dependent Dropdown","text":"<p>This feature allows dynamic loading options for <code>singleSelect</code> and <code>multipleSelect</code> fields when options for that field depend on other fields\u2019 values. It loads options via API call to the endpoint mentioned in <code>endpointUrl</code> under options when any dependencies field is updated and all required dependencies fields are non-null.</p> <p>All non-required dependencies fields can be of any type, but all required dependencies fields should only be of single-select type.</p> <p>All dependencies fields\u2019 values are added to the endpoint URL as query parameters.</p>"},{"location":"advanced/dependent_dropdown/#usage","title":"Usage","text":"<pre><code>{\n\"field\": \"bucket_name\",\n\"label\": \"S3 Bucket\",\n\"type\": \"singleSelect\",\n\"required\": true,\n\"options\": {\n\"disableonEdit\": true,\n\"dependencies\": [\n\"aws_account\",\n\"aws_iam_role\",\n\"aws_s3_region\",\n\"private_endpoint_enabled\",\n\"sts_private_endpoint_url\",\n\"s3_private_endpoint_url\"\n],\n\"endpointUrl\": \"splunk_ta_aws/splunk_ta_aws_s3buckets\"\n}\n}\n</code></pre> <p>Note: When using the text type field, add debounce using the custom hook to reduce the number of API calls.</p>"},{"location":"advanced/groups_feature/","title":"Groups Feature","text":"<p>Using this functionality, the Inputs page form can be divided into distinct sections, each comprising relevant fields. If the <code>isExpandable</code> property is set to true in the global config file, the group will be of the collapsible panel type. </p> <p>The groups will be displayed at the bottom of the form.</p>"},{"location":"advanced/groups_feature/#properties","title":"Properties","text":"<ul> <li><code>label</code> to display the title of a specific group.</li> <li><code>fields</code> to specify the list of fields in a group. All fields must be present in the entity.</li> <li><code>options</code>:<ul> <li><code>isExpandable</code> can be used to hide/show fields of the group. The default value is false.</li> <li><code>expand</code> to show all fields of the group while opening the form. The default value is false.</li> </ul> </li> </ul>"},{"location":"advanced/groups_feature/#usage","title":"Usage","text":"<pre><code>{\n\"name\": \"aws_config\",\n\"title\": \"Config\",\n\"groups\": [\n{\n\"label\": \"AWS Input Configuration\",\n\"options\": {\n\"isExpandable\": false\n},\n\"fields\": [\n\"name\",\n\"aws_account\"\n]\n},\n{\n\"label\": \"Splunk-related Configuration\",\n\"options\": {\n\"isExpandable\": false\n},\n\"fields\": [\n\"sourcetype\",\n\"index\"\n]\n},\n{\n\"label\": \"Advanced Settings\",\n\"options\": {\n\"expand\": false,\n\"isExpandable\": true\n},\n\"fields\": [\n\"polling_interval\"\n]\n}\n],\n\"entity\": []\n},\n</code></pre>"},{"location":"advanced/groups_feature/#output","title":"Output","text":"<p>This is how it looks like in the UI: </p>"},{"location":"advanced/oauth_support/","title":"OAuth Support","text":"<p>UCC allows you to add Auth support in the configuration page. In UCC, OAuth2.0 of the Authorization Code Flow <code>grant</code> type is being used. It only supports the standard parameters specified in RFCP749 for obtaining an authorization code.</p> <p>Auth can be used inside the entity tag. Use <code>type: \"oauth\"</code> in the entity list and also need to specify the <code>options</code> next to the <code>type: \"oauth\"</code>.</p>"},{"location":"advanced/oauth_support/#properties","title":"Properties","text":"<ul> <li><code>type</code> field value must be oauth.</li> <li> <p><code>options</code>:</p> <ul> <li><code>auth_type</code> must be present. It can have either [\u201cbasic\u201d, \u201coauth\u201d] (If we want basic and oauth both support) or [\u201coauth\u201d] (If we want oauth support only).</li> <li><code>basic</code> This must be present only if auth_type: [\u201cbasic\u201d]<ul> <li>This will have list of fields you want to add in basic authentication flow. In the given example, it is username, password and security_token. </li> <li>Please note that as of now, If you are selecting basic as auth_type then username and password fields are mandatory.</li> </ul> </li> <li><code>oauth</code> This will have list of fields you want to add in oauth authentication flow. In the given example, it is <code>client_id</code>, <code>client_secret</code>, <code>redirect_url</code>, <code>scope</code> and <code>endpoint</code>.</li> <li>These fields are mandatory:<ul> <li><code>client_id</code> this is client id for the your app for which you want auth</li> <li><code>client_secret</code> this is client secret for the your app for which you want auth</li> <li><code>redirect_url</code> this will show redirect url which needs to be put in app\u2019s redirect url.</li> <li><code>endpoint</code> this will be endpoint for which we want to build oauth support. For example for salesforce that will be either \u201clogin.salesforce.com\u201d or \u201ctest.salesforce.com\u201d or any other custom endpoint.</li> </ul> </li> <li><code>auth_code_endpoint</code> this must be present and its value should be endpoint value for getting the auth_code using the app. If the url to get auth_code is https://login.salesforce.com/services/oauth2/authorize then this will have value /services/oauth2/authorize</li> <li><code>access_token_endpoint</code> this must be present and its value should be endpoint value for getting access_token using the auth_code received. If the url to get access token is https://login.salesforce.com/services/oauth2/token then this will have value /services/oauth2/token</li> <li><code>auth_label</code> this allow user to have custom label for Auth Type dropdown</li> <li><code>oauth_popup_width</code> width in pixels of the popup window that will open for oauth authentication (Optional, defaults to 600)</li> <li><code>oauth_popup_height</code> height in pixels of the popup window that will open for oauth authentication (Optional, defaults to 600)</li> <li><code>oauth_timeout</code> timeout in seconds for oauth authentication (Optional, defaults to 180 seconds)</li> <li><code>oauth_state_enabled</code> to include state for oauth authentication (default value is false)</li> <li> <p><code>auth_endpoint_token_access_type</code> optional parameter that is mapped into value of token_access_type query param in authorisation url</p> </li> <li> <p>Fields allowed in basic and oauth fields as of now:</p> <ul> <li><code>oauth_field</code>: This should be kept as it is and without any change.</li> <li><code>label</code>: This can be changed if the user wants to change the label of the field in UI.</li> <li><code>field</code>: For now this user must keep it as it is for mandatory fields as mentioned above.</li> <li><code>help</code> : This can be changed if user wants to change the help text displayed below field.</li> <li><code>encrypted</code> : This should be true if user wants that particular field encrypted else no need to have this parameter.</li> <li><code>required</code>: To specify whether the field is required or not. The default value is true.</li> <li><code>defaultValue</code>: The initial input value. (string, number or boolean)</li> <li><code>options</code>:<ul> <li><code>placeholder</code>: The placeholder for the field.</li> <li><code>disableonEdit</code>: When the form is in edit mode, the field becomes uneditable. Default value: false</li> <li><code>enable</code>: The enable property sets whether a field is enabled or not. Default value: true</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>[!WARNING] Placeholder attribute is deprecated and will be removed in one of the following versions. Instead, we recommend using \u201chelp\u201d attribute.</p>"},{"location":"advanced/oauth_support/#usage","title":"Usage","text":"<pre><code>\"configuration\": {\n\"title\": \"Configurations\",\n\"description\": \"Configure your servers and templates.\",\n\"tabs\": [\n{\n\"name\": \"account\",\n\"title\": \"Account\",\n\"entity\": [\n{\n\"field\": \"name\",\n\"label\": \"Name\",\n\"type\": \"text\",\n\"required\": true,\n\"help\": \"Enter a unique name for each Crowdstrike falcon host account.\",\n},\n{\n\"type\": \"oauth\",\n\"field\": \"oauth\",\n\"label\": \"Not used\",\n\"options\": {\n\"auth_type\": [\n\"basic\",\n\"oauth\"\n],\n\"basic\": [\n{\n\"oauth_field\": \"username\",\n\"label\": \"User Name\",\n\"field\": \"username\",\n\"help\": \"Enter Account name.\"\n},\n{\n\"oauth_field\": \"password\",\n\"label\": \"Password\",\n\"field\": \"password\",\n\"encrypted\": true,\n\"help\": \"Enter Password.\"\n},\n{\n\"oauth_field\": \"security_token\",\n\"label\": \"Securtiy Token\",\n\"field\": \"security_token\",\n\"encrypted\": true,\n\"help\": \"Enter Security Token.\"\n}\n],\n\"oauth\": [\n{\n\"oauth_field\": \"client_id\",\n\"label\": \"Client Id\",\n\"field\": \"client_id\",\n\"help\": \"Enter Client Id.\"\n},\n{\n\"oauth_field\": \"client_secret\",\n\"label\": \"Client Secret\",\n\"field\": \"client_secret\",\n\"encrypted\": true,\n\"help\": \"Enter Client Secret.\"\n},\n{\n\"oauth_field\": \"redirect_url\",\n\"label\": \"Redirect url\",\n\"field\": \"redirect_url\",\n\"help\": \"Please add this redirect URL in your app.\"\n},\n{\n\"oauth_field\": \"scope\",\n\"label\": \"Scope\",\n\"field\": \"scope\",\n\"help\": \"Enter the scope for the authorization code with ',' separating each scope.\",\n\"required\": false\n},\n{\n\"oauth_field\": \"endpoint\",\n\"label\": \"Endpoint\",\n\"field\": \"endpoint\",\n\"help\": \"Enter Endpoint\"\n}\n],\n\"auth_label\": \"Auth Type\",\n\"oauth_popup_width\": 600,\n\"oauth_popup_height\": 600,\n\"oauth_timeout\": 180,\n\"auth_code_endpoint\": \"/services/oauth2/authorize\",\n\"access_token_endpoint\": \"/services/oauth2/token\",\n\"auth_endpoint_token_access_type\": \"offline\"\n}\n}\n],\n}\n]\n}\n</code></pre>"},{"location":"advanced/oauth_support/#output","title":"Output","text":"<p>This is how the Add Account modal looks after adding the above code to the globalConfig.json file:</p> <p>This is how Add Account looks when auth_type is <code>basic</code>: </p> <p>This is how Add Account looks when auth_type is <code>oauth</code>: </p>"},{"location":"advanced/os-dependent_libraries/","title":"OS-dependent libraries","text":"<p>This feature allows us to download and unpack libraries with appropriate binaries for the indicated operating system during the build process. To do this, you need to expand the meta section in global config with the os-dependentLibraries field. This field takes the following attributes:</p> Property Type Description default value name* string Name of the library we want to download. - version* string Specific version of given library. - dependencies boolean (Optional) Parameter which determines whether the <code>--no-deps</code> flag will be used when installing package from <code>pip</code>. When the value is set to <code>true</code> the library will be installed along with all its dependencies. When the value is set to <code>false</code> (default) <code>{name}={version}</code> must be present in packages <code>requirements.txt</code>. false platform* string The platform for which we want to download the specified library. The value depends on the available wheels for a given library e.g. for this wheel cryptography-41.0.5-cp37-abi3-manylinux_2_28_x86_64.whl platform is manylinux_2_28_x86_64. - python_version* string Python version compatible with the library. - target* string Path where the selected library will be unpacked. - os* string The name of the operating system for which the library is intended. Using this parameter, an appropriate insert into sys.path will be created. It takes 3 values windows, linux and darwin. -"},{"location":"advanced/os-dependent_libraries/#about-wheels-files","title":"About wheels files","text":"<p>Generally, the wheel name convention is {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl. For example for this particular library: grpcio-1.54.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl  your pip parameters are:</p> <ul> <li>name = grpcio</li> <li>version = 1.54.2</li> <li>platform = manylinux_2_17_x86_64 or manylinux2014_x86_64</li> <li>python_version = 37</li> <li>target = your/path/to/target</li> <li>os = linux</li> </ul> <p>and your pip command should look like this: <code>pip install --no-deps --platform manylinux_2_17_x86_64 --python-version 37 --target your/path/to/target --only-binary=:all: grpcio==1.54.2</code></p> <p>A dot in the platform part indicates that a given distribution supports several platforms. In this case \u201c.\u201d in manylinux_2_17_x86_64.manylinux2014_x86_64 means this distribution supports both manylinux_2_17_x86_64 and manylinux2014_x86_64.</p> <p>for more informations, we recommend watching .whl and manylinux platform</p>"},{"location":"advanced/os-dependent_libraries/#usage","title":"Usage","text":"<pre><code>    ...\n    \"meta\": {\n        \"name\": \"&lt;TA name&gt;\",\n        \"restRoot\": \"&lt;restRoot&gt;\",\n        \"version\": \"&lt;TA version&gt;\",\n        \"displayName\": \"&lt;TA display name&gt;\",\n        \"schemaVersion\": \"&lt;schema version&gt;\",\n        \"os-dependentLibraries\": [\n            {\n                \"name\": \"cryptography\",\n                \"version\": \"41.0.5\",\n                \"platform\": \"manylinux2014_x86_64\",\n                \"python_version\": \"37\",\n                \"os\": \"linux\",\n                \"target\": \"3rdparty/linux\"\n            },\n            {\n                \"name\": \"cryptography\",\n                \"version\": \"41.0.5\",\n                \"platform\": \"win_amd64\",\n                \"python_version\": \"37\",\n                \"os\": \"windows\",\n                \"target\": \"3rdparty/windows\"\n            },\n            {\n                \"name\": \"cryptography\",\n                \"version\": \"41.0.5\",\n                \"dependencies\": true,\n                \"platform\": \"manylinux2014_x86_64\",\n                \"python_version\": \"37\",\n                \"os\": \"linux\",\n                \"target\": \"3rdparty/linux_with_deps\"\n            },\n            {\n                \"name\": \"cffi\",\n                \"version\": \"1.15.1\",\n                \"platform\": \"win_amd64\",\n                \"python_version\": \"37\",\n                \"os\": \"windows\",\n                \"target\": \"3rdparty/windows\"\n            }\n        ]\n    }\n</code></pre>"},{"location":"advanced/os-dependent_libraries/#result","title":"Result","text":"<p>Running the build for the above configuration will result in the creation of the following structure:</p> <pre><code>output\n    \u2514\u2500\u2500&lt;TA&gt;\n        \u251c\u2500\u2500 bin\n        ...\n        \u2514\u2500\u2500 lib\n            \u2514\u2500\u2500 3rdparty\n                \u251c\u2500\u2500 linux\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cryptography\n                \u2502\u00a0\u00a0 \u2514\u2500\u2500 cryptography-41.0.5.dist-info\n                \u251c\u2500\u2500 linux_with_deps\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 _cffi_backend.cpython-37m-x86_64-linux-gnu.so\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cffi\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cffi-1.15.1.dist-info\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cryptography\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cryptography-41.0.5.dist-info\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 pycparser\n                \u2502\u00a0\u00a0 \u2514\u2500\u2500 pycparser-2.21.dist-info\n                \u2514\u2500\u2500 windows\n                    \u251c\u2500\u2500 _cffi_backend.cp37-win_amd64.pyd\n                    \u251c\u2500\u2500 cffi\n                    \u251c\u2500\u2500 cffi-1.15.1.dist-info\n                    \u251c\u2500\u2500 cryptography\n                    \u2514\u2500\u2500 cryptography-41.0.5.dist-info\n</code></pre> <p>During the build process, a python script \u201cimport_declare_test.py\u201d will be created in output/ta_name/bin to manipulate system paths.  In each input using the specified libraries, this script must be imported.  Currently, three operating systems are supported: Windows, Linux and Darwin.  If, for development purposes, there is a need to create other custom manipulations on sys.path,  create your own script called \u201cimport_declare_test.py\u201d and place it in the package/bin folder.  This way, when building the TA, the default script will be replaced with the one created by the developer. The default script for the above configuration will look like this:</p> <pre><code>import os\nimport sys\nimport re\nfrom os.path import dirname\n\nta_name = 'demo_addon_for_splunk'\npattern = re.compile(r'[\\\\/]etc[\\\\/]apps[\\\\/][^\\\\/]+[\\\\/]bin[\\\\/]?$')\nnew_paths = [path for path in sys.path if not pattern.search(path) or ta_name in path]\nnew_paths.insert(0, os.path.join(dirname(dirname(__file__)), \"lib\"))\nnew_paths.insert(0, os.path.sep.join([os.path.dirname(__file__), ta_name]))\nsys.path = new_paths\n\nbindir = os.path.dirname(os.path.realpath(os.path.dirname(__file__)))\nlibdir = os.path.join(bindir, \"lib\")\nplatform = sys.platform\nif platform.startswith(\"linux\"):\n    sys.path.insert(0, os.path.join(libdir, \"3rdparty/linux_with_deps\"))\n    sys.path.insert(0, os.path.join(libdir, \"3rdparty/linux\"))\nif platform.startswith(\"win\"):\n    sys.path.insert(0, os.path.join(libdir, \"3rdparty/windows\"))\n</code></pre>"},{"location":"advanced/save_validator/","title":"Save Validator","text":"<p>This feature allows us to pass a Javascript function as a string to apply customized validation to form data.</p> <p>By using this approach, developers can write custom JavaScript code where they can write their business logic and by validating they may return error messages which will be displayed at the top of the form. </p> <p>This custom javascript function have a parameter (for ex. dataDict) which contains the form data object.</p> <p>This function will be called after all validators have validated the data form.</p>"},{"location":"advanced/save_validator/#usage","title":"Usage","text":"<pre><code>{\n\"name\": \"example_input_one\",\n\"title\": \"Example Input One\",\n\"entity\": [],\n\"options\": {\n\"saveValidator\": \"function start_data_validator(dataDict) { const provided_datetime = new Date(dataDict['start_date']).getTime(); const current_datetime = new Date().getTime(); if (provided_datetime &gt; current_datetime) { return 'Start date should not be in future'; }}\"\n}\n}\n</code></pre>"},{"location":"advanced/sub_description/","title":"Sub description","text":"<p>This feature allows us to pass broarder description on Input and Configuration page displayed under main description.</p>"},{"location":"advanced/sub_description/#sub-descritpion-properties","title":"Sub Descritpion Properties","text":"Property Type Description text* string Text used for that description, you can put \\n to add a breakline links object To enable including links inside description"},{"location":"advanced/sub_description/#links","title":"Links","text":"Property Type Description slug* string Used to identify place for link to appear, put inside text, surrounded by 2 squared brackets link* string Link to be used linkText* string Text to be inserted instead of slug"},{"location":"advanced/sub_description/#usage","title":"Usage","text":"<pre><code>{\n\"name\": \"example_input_one\",\n\"title\": \"Example Input One\",\n\"entity\": [],\n\"subDescription\": {\n\"text\": \"Ingesting data from to Splunk Cloud?\\nRead our [[blogPost]] to learn more about Data Manager and it's availability on your Splunk Cloud instance.\",\n\"links\": [\n{\n\"slug\": \"blogPost\",\n\"link\": \"https://splk.it/31oy2b2\",\n\"linkText\": \"blog post\"\n}\n]\n}\n}\n</code></pre>"},{"location":"custom_ui_extensions/custom_cell/","title":"Custom Cell","text":"<p>A Custom Cell is used to update the content of a table cell. </p> <p><code>customCell</code> attribute will be used in the table header on the inputs and configuration page.</p>"},{"location":"custom_ui_extensions/custom_cell/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. el The <code>el</code> is used to render a custom cell element in a table. serviceName The name of the service/tab specified in the globalConfig file. row The object of the record for which the CustomRowInput constructor is called. field The name of the field as specified in the globalConfig file."},{"location":"custom_ui_extensions/custom_cell/#methods","title":"Methods","text":"Property Description render <code>render</code> is a method which should have logic for the custom cell component, and it will be executed automatically when the create, edit, or clone actions performed."},{"location":"custom_ui_extensions/custom_cell/#usage","title":"Usage","text":"<pre><code>{\n\"name\": \"account\",\n\"title\": \"Account\"\n\"entity\": [],\n\"table\": {\n\"actions\": [\"edit\", \"delete\", \"clone\"],\n\"header\": [{\n\"label\": \"Name\",\n\"field\": \"name\"\n}, {\n\"label\": \"Auth Type\",\n\"field\": \"auth_type\"\n}, {\n\"label\": \"Test Custom Cell\",\n\"field\": \"test_custom_cell\",\n\"customCell\": {\n\"src\": \"CustomInputCell\",\n\"type\": \"external\"\n}\n}]\n}\n}\n</code></pre>"},{"location":"custom_ui_extensions/custom_cell/#example","title":"Example","text":"<pre><code>class CustomInputCell {\n/**\n* Custom Row Cell\n* @constructor\n* @param {Object} globalConfig - Global configuration.\n* @param {string} serviceName - Input service name.\n* @param {element} el - The element of the custom cell.\n* @param {Object} row - custom row object.\n* @param {string} field - The cell field name.\n*/\nconstructor(globalConfig, serviceName, el, row, field) {\nthis.globalConfig = globalConfig;\nthis.serviceName = serviceName;\nthis.el = el;\nthis.row = row;\nthis.field = field;\n}\nrender() {\nlet html = \"\";\n// Check for missing configuration in account\nif (this.row.account_multiple_select === \"one\") {\nhtml = \"Option One\";\n} else if(this.row.account_multiple_select === \"two\"){\nhtml = \"Option Two\";\n} else {\nhtml = \"Option is not available\"\n}\nthis.el.innerHTML = html;\nreturn this;\n}\n}\nexport default CustomInputCell; </code></pre> <p>Note: The Javascript file for the custom cell should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/custom_cell/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"custom_ui_extensions/custom_control/","title":"Custom Control","text":"<p>The Custom Control feature allows you to display any customised input component in the form. The developer can easily design and render any complex input component with this feature. Modern TAs frequently require the use of complex input components, and this feature will allow them to use the custom component in the form that is best suited to their needs without relying on newer releases of UCC that support their component.</p>"},{"location":"custom_ui_extensions/custom_control/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. el The <code>el</code> is used to render a custom input element in a form. data The <code>data</code> object holds details regarding the execution mode (create, edit, clone), the value of a field, and the service name where this custom component is being rendered. setValue This method is used to set the value of the custom component. <p>setValue: \u0192 (newValue)</p> util This is a utility object with various functions that can be used to manipulate the UI. There are 4 methods associated : <ul><li><code>clearAllErrorMsg</code>: \u0192 (State)</li><li><code>setErrorFieldMsg</code>: \u0192 (field, msg)</li><li><code>setErrorMsg</code>: \u0192 (msg)</li><li><code>setState</code>: \u0192 setState(callback)</li></ul>"},{"location":"custom_ui_extensions/custom_control/#methods","title":"Methods","text":"Property Description render <code>render</code> is a method which should have logic for the custom component, and it will be executed automatically when the create, edit, or clone actions performed. validation This method should contain the validation logic for the value of the custom component."},{"location":"custom_ui_extensions/custom_control/#usage","title":"Usage","text":"<pre><code>{\n\"name\": \"account\",\n\"table\": {},\n\"entity\": [\n{\n\"type\": \"custom\",\n\"label\": \"Example Custom Control\",\n\"field\": \"custom_control_field\",\n\"help\": \"This is an example multipleSelect for account entity\",\n\"options\":{\n\"src\": \"custom_control\",\n\"type\": \"external\"\n},\n\"required\": true\n},\n{\n\"type\": \"text\",\n\"label\": \"Name\",\n\"options\": {\n\"placeholder\": \"Required\"\n},\n\"field\": \"name\",\n\"help\": \"Enter a unique name for this account.\",\n\"required\": true\n},\n]\n}\n</code></pre>"},{"location":"custom_ui_extensions/custom_control/#example","title":"Example","text":"<pre><code>class CustomControl {\n    /**\n     *\n     * @constructor\n     * @param {object} globalConfig - Global configuration.\n     * @param {element} el - The element of the custom row.\n     * @param {object} data - Mode, serviceName, and value.\n     * @param {object} util - The utility object.\n     * @param {function} setValue - set value of the custom field.\n     */\n    constructor(globalConfig, el, data, setValue, util) {\n        this.globalConfig = globalConfig;\n        this.el = el;\n        this.data = data;\n        this.util = util;\n        this.setValue = setValue;\n    }\n\n    _onSelectOptionChange() { }\n\n    validation(field, value) {\n        // Validation logic for value. Return the error message if failed.\n        if (value === 'input_two') {\n            return 'Wrong value selected.';\n        }\n    }\n\n    render() {\n        let content_html = `\n            &lt;select id=\"custom_control\"&gt;\n&lt;option value=\"input_one\"&gt;Input One&lt;/option&gt;\n&lt;option value=\"input_two\"&gt;Input Two&lt;/option&gt;\n&lt;/select&gt;\n`;\n\n        this.el.innerHTML = content_html;\n\n        $('select#custom_control').on('change', () =&gt; this._onSelectOptionChange());\n        return this;\n    }\n}\n\nexport default CustomControl;\n</code></pre> <p>Note: The Javascript file for the custom control should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/custom_control/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"custom_ui_extensions/custom_hook/","title":"Custom Hook","text":"<p>Custom Hook is a JavaScript function that allows us to reuse some code throughout the app. It is used to validate form/dialog inputs.</p> <p>Hook is nothing more than Javascript event handling on the events <code>onCreate</code>, <code>onChange</code>, <code>onRender</code>, <code>onSave</code>, <code>onSaveSuccess</code>, <code>onSaveFail</code> and <code>onEditLoad</code>.</p> <p>Hooks can be used inside the services and tabs placed next to the entity tag. </p> <p>The <code>type</code> key needs to be set as external to webpack the custom extensions. UCC  expects scripts marked as external to follow the ESM syntax for exporting and importing modules. Any other value or not specifying type will default to old requireJS (AMD) import syntax. Aditionally, the custom javascript file and the imported modules will not get webpack-ed.</p>"},{"location":"custom_ui_extensions/custom_hook/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. serviceName The name of the service/tab specified in the globalConfig. state <code>state</code> is an object that represents the actual state value of the components in the service/tab when the hook\u2019s constructor is called. Updating this object will not update the state of the page. Use the <code>util.setState</code> method to update the page\u2019s state. The <code>state</code> object contains the actual state data along with the  <code>errorMsg</code> and <code>warningMsg</code> properties. mode There are three possible modes: Edit, Clone and Delete. Which are used in service/tab components. util This is a utility object with various functions that can be used to manipulate the page UI. There are 4 methods associated : <ul><li><code>clearAllErrorMsg</code>: \u0192 (State)</li><li><code>setErrorFieldMsg</code>: \u0192 (field, msg)</li><li><code>setErrorMsg</code>: \u0192 (msg)</li><li><code>setState</code>: \u0192 setState(callback)</li></ul> groupName The name of the menu group from which the inputs service is called. This parameter should only be used with the multi-level menu feature."},{"location":"custom_ui_extensions/custom_hook/#methods","title":"Methods","text":"<p>We can use these methods to overirde existing methods according to the functionality desired:</p> Property Description onCreate This method is called when we click on the \u201cAdd/Create\u201d button for creating a new record on the page. debounce This method is used to create another special method which does not get executed on every call. This functionality can be useful when listening for an event. <p>For Example, we only want to show help text/error when the user has stopped typing for 500ms in a text-box and not on every key press.  In this scenario, the debounce method will induce a time wait every time a key is pressed and the method will only execute when there is no other call to it within that time wait.</p> onChange This method is called when the value of any field is changed. onRender This method is called once whenever the user clicks on a \u201cAdd\u201d, \u201cEdit\u201d or \u201cClone\u201d button. onSave This method is called when the user clicks the \u201cSave\u201d button after creating, editing or cloning a record. onSaveSuccess This method is called when a record has been successfully saved. onSaveFail This method is called when a record fails to save due to any error. onEditLoad This method is called when the user clicks on a \u201cEdit\u201d button for an existing record."},{"location":"custom_ui_extensions/custom_hook/#usage","title":"Usage","text":"<pre><code>\"inputs\": {\n\"title\": \"Inputs\",\n\"description\": \"Manage your data inputs\",\n\"services\": [\n{\n\"name\": \"example_input_one\",\n\"title\": \"Example Input One\",\n\"hook\": {\n\"src\": \"input_hook\",\n\"type\": \"external\"\n},\n\"entity\": []\n}\n]\n}\n</code></pre>"},{"location":"custom_ui_extensions/custom_hook/#example","title":"Example","text":"<pre><code>import _ from \"underscore\"; // example of a ESM import\n\nclass Hook {\n    /**\n     * Form hook\n     * @constructor\n     * @param {Object} globalConfig - Global configuration.\n     * @param {string} serviceName - Service name\n     * @param {object} state - object with state of the components on the servcice/page\n     * @param {string} mode - edit,create or clone\n     * @param {object} util - the utility object\n     */\n    constructor(globalConfig, serviceName, state, mode, util, groupName) {\n        this.globalConfig = globalConfig;\n        this.serviceName = serviceName;\n        this.state = state;\n        this.mode = mode;\n        this.util = util;\n        this.groupName = groupName;\n        this._debouncedNameChange = this.debounce(this._nameChange.bind(this), 200);\n        console.log('Inside Hook mode: ', mode);\n    }\n\n    onCreate() {\n        if (this.mode == \"create\") {\n            console.log('in Hook: onCreate');\n            // This is an example of how to store groupName value for a particular form field.\n            this.util.setState((prevState) =&gt; {\n                let data = { ...prevState.data };\n                data.test_field.value = this.groupName;\n                return { data };\n            });\n        }\n    }\n\n    debounce(func, wait) {\n        let timeout;\n        // This is the function that is returned and will be executed many times\n        // We spread (...args) to capture any number of parameters we want to pass\n        return function executedFunction(...args) {\n            // The callback function to be executed after\n            // the debounce time has elapsed\n            // This will reset the waiting every function execution.\n            // This is the step that prevents the function from\n            // being executed because it will never reach the\n            // inside of the previous setTimeout\n            clearTimeout(timeout);\n\n            // Restart the debounce waiting period.\n            // setTimeout returns a truthy value\n            timeout = setTimeout(() =&gt; {func(...args)}, wait);\n        }\n    }\n\n    onChange(field, value, dataDict) {\n        console.log('in Hook: onChange ', field, ' value : ', value);\n        console.log('in Hook: onChange state: ', this.state);\n        if (field === \"name\") {\n          this._debouncedNameChange(dataDict)\n        }\n    }\n\n    onRender() {\n        console.log('in Hook: onRender');\n    }\n\n    /* \n        Put form validation logic here.\n        Return ture if validation pass, false otherwise.\n        Call displayErrorMsg when validtion failed.\n    */\n    onSave(dataDict) {\n        console.log('in Hook: onSave with data: ', dataDict);\n        var accountname = dataDict.name;\n        var auth_type = dataDict.auth_type;\n        var endpoint = dataDict.url;\n\n        this.util.setState((prevState) =&gt; {\n            /*\n            Example usage of util.clearAllErrorMsg. It just returns the modified state object after clearing the error messages.\n            It won't update the UI.\n            */\n            let new_state = this.util.clearAllErrorMsg(prevState);\n            return new_state\n        });\n\n        if (accountname === null || accountname.trim().length === 0) {\n            var msg = \"Field account name is required\";\n            this.util.setErrorMsg(msg);\n            return false;\n        } else if (endpoint === null || endpoint.trim().length === 0) {\n            var msg = \"Field URL is required\";\n            this.util.setErrorMsg(msg);\n            return false;\n        } else if (endpoint.indexOf(\"https://\") !== 0) {\n            var msg =\n            \"URL should start with 'https://' as only secure URLs are supported.\";\n            this.util.setErrorFieldMsg(\"url\", msg);\n            return false;\n        } else if (auth_type == \"oauth\") {\n            endpoint = endpoint.replace(\"https://\", \"\"); //removing the https schema from the endpoint\n            this.util.setState((prevState) =&gt; {\n            let data = { ...prevState.data };\n            data.endpoint.value = endpoint;\n            return { data };\n            });\n        }\n        return true;\n    }\n\n    onSaveSuccess() {\n        console.log('in Hook: onSaveSuccess');\n    }\n\n    onSaveFail() {\n        console.log('in Hook: onSaveFail');\n    }\n\n    /*\n    Put logic here to execute javascript after loading edit UI.\n    */\n    onEditLoad() {\n        console.log('in Hook: onEditLoad');\n    }\n\n    _nameChange(dataDict) {\n        console.log('in Hook: _nameChange');            \n    }\n}\n\nexport default Hook;\n</code></pre> <p>Note: The Javascript file for the custom control should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/custom_menu/","title":"Custom Menu","text":"<p>Custom Menu can be created when there is more than one input present on the inputs page. </p> <p>This feature is deprecated (will be removed in the next major version) as <code>Multilevel Menu</code> is now ready to use if more than one input is available.</p> <p>In addition to the multiple inputs, we can use this menu to create a custom component at the top right corner of the Input page.</p>"},{"location":"custom_ui_extensions/custom_menu/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. el The <code>el</code> is used to render a custom element (on the top right corner) on the Inputs page. setValue This method is used to set the value of the custom component. <p>setValue: \u0192 (newValue)</p>"},{"location":"custom_ui_extensions/custom_menu/#methods","title":"Methods","text":"Property Description render <code>render</code> is a method which should have logic for the custom menu, and it will be executed automatically when inputs page is rendered."},{"location":"custom_ui_extensions/custom_menu/#usage","title":"Usage","text":"<pre><code>\"inputs\": {\n\"title\": \"Inputs\",\n\"description\": \"Manage your data inputs\",\n\"services\": [],\n\"table\": {\n\"actions\": [\"edit\", \"enable\", \"delete\", \"clone\"],\n\"header\": [],\n\"moreInfo\": []\n},\n\"menu\": {\n\"src\": \"custom_menu\",\n\"type\": \"external\"\n}\n}\n</code></pre>"},{"location":"custom_ui_extensions/custom_menu/#example","title":"Example","text":"<pre><code>class CustomMenu {\n\n    /**\n    * Custom Menu\n    * @constructor\n    * @param {Object} globalConfig - Global configuration.\n    * @param {element} el - The element of the custom menu.\n    * @param {function} setValue - set value of the custom field.\n    */\n    constructor(globalConfig, el, setValue) {\n        this.globalConfig = globalConfig;\n        this.el = el;\n        this.setValue = setValue;\n        this.services = {};\n    }\n\n    render() {\n        this.el.innerHTML = '&lt;button type=\"button\"&gt;Click Me! I am a button for custom menu&lt;/button&gt;'\n        this.el.onclick = () =&gt; {\n            this.setValue({\n                service: \"example_input_one\" // The value of service can be the name of any services, specified in the globalConfig file.\n            })\n        }\n    }\n}\nexport default CustomMenu;\n</code></pre> <p>Note: The Javascript file for the custom control should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/custom_menu/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"custom_ui_extensions/custom_row/","title":"Custom Row","text":"<p>When a row is expanded on the Inputs table, Custom Row is utilized to incorporate a customized element. By clicking on the icon provided on the left side of each row, the input-specific details are displayed.</p>"},{"location":"custom_ui_extensions/custom_row/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. el The <code>el</code> is used to render a customized element on the Inputs table when a row is expanded. serviceName The name of the service/tab specified in the globalConfig file. row The object of the record for which the CustomRowInput constructor is called."},{"location":"custom_ui_extensions/custom_row/#methods","title":"Methods","text":"Property Description render <code>render</code> is a method which should have logic for the custom row component, and it will be executed automatically when the create, edit, or clone actions performed."},{"location":"custom_ui_extensions/custom_row/#usage","title":"Usage","text":"<pre><code>\"inputs\": {\n\"title\": \"Inputs\",\n\"description\": \"Manage your data inputs\",\n\"services\": [],\n\"table\": {\n\"actions\": [\"edit\", \"enable\", \"delete\", \"clone\"],\n\"header\": [],\n\"customRow\": {\n\"src\": \"custom_input_row\",\n\"type\": \"external\"\n}\n}\n}\n</code></pre>"},{"location":"custom_ui_extensions/custom_row/#example","title":"Example","text":"<pre><code>class CustomInputRow {\n/**\n* Custom Row Cell\n* @constructor\n* @param {Object} globalConfig - Global configuration.\n* @param {string} serviceName - Input service name.\n* @param {element} el - The element of the custom cell.\n* @param {Object} row - custom row object.\n*/\nconstructor(globalConfig, serviceName, el, row) {\nthis.globalConfig = globalConfig;\nthis.serviceName = serviceName;\nthis.el = el;\nthis.row = row;\n}\n\nrender() {\nconst content_html_template = 'Custom Input Row';\nthis.el.innerHTML = content_html_template;\nreturn this;\n}\n}\n\nexport default CustomInputRow;\n</code></pre> <p>Note: The Javascript file for the custom control should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/custom_row/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"custom_ui_extensions/custom_tab/","title":"Custom Tab","text":"<p>Custom Tab feature can be used to render any customized UI component in the Configuration tabs. With this feature, the developer can design and render any complex input with ease. This is an advanced feature and can be leveraged with limitless functionalities. Modern TAs are receiving complex use cases and this feature will allow them to design the UI perfectly for their case without having to depend on the newer releases of UCC supporting their component.</p>"},{"location":"custom_ui_extensions/custom_tab/#properties","title":"Properties","text":"Property Description tab It is an object with the properties and values of a custom tab object from the global config file. el The <code>el</code> is used to render a customized component on the Configuration tabs."},{"location":"custom_ui_extensions/custom_tab/#methods","title":"Methods","text":"Property Description render <code>render</code> is a method which should have logic for the custom component, and it will be executed automatically when configuration page is rendered."},{"location":"custom_ui_extensions/custom_tab/#usage","title":"Usage","text":"<pre><code>\"configuration\": {\n\"title\": \"Configuration\",\n\"descriptions\": \"Set up your add-on\",\n\"tabs\": [\n{\n\"name\": \"account\",\n\"title\": \"Account\",\n\"entity\": [],\n\"table\": {}\n},\n{\n\"name\": \"logging\",\n\"title\": \"Logging\",\n\"entity\": []\n},\n{\n\"name\": \"proxy\",\n\"title\": \"Proxy\",\n\"entity\": []\n},\n{\n\"name\": \"custom_tab\",\n\"title\": \"Customized Tab\",\n\"customTab\": {\n\"src\": \"custom_tab\",\n\"type\": \"external\"\n}\n}\n]\n}\n</code></pre>"},{"location":"custom_ui_extensions/custom_tab/#example","title":"Example","text":"<pre><code>class CustomTab {\n\n    /**\n    * Custom Tab\n    * @constructor\n    * @param {Object} tab - Tab details.\n    * @param {element} el - The element of the custom menu.\n    */\n    constructor(tab, el) {\n        this.tab = tab;\n        this.el = el;\n    }\n\n    render() {\n        this.el.innerHTML = `&lt;h1 style=\"margin-top: 20px\"&gt;${this.tab.title} - This is a custom component rendered from the TA&lt;/h1&gt;`\n    }\n}\nexport default CustomTab;\n</code></pre> <p>Note: The Javascript file for the custom tab should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/custom_tab/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/","title":"Entity","text":""},{"location":"entity/#entity-properties","title":"Entity Properties","text":"Property Type Description Default Value field* string To define a particular entity field. - label* string It represents a caption for a field in a user interface. - type* string To specify the type of entity to be rendered in inputs or configuration form. - help string Help text gives context about a fields input, such as how the input will be used. It is displayed directly below an input field. - tooltip string Displays a tooltip beside the label. - defaultValue string, number or boolean The initial input value. - options object To specify an additional attribute for a particular type of entity, such as <code>items</code> for a radio bar. - required boolean To specify whether the field is required or not. false encrypted boolean To encrypt that particular field. false validators array It is used to validate the values of fields using various validators. - <p>[!WARNING] Placeholder attribute is deprecated and will be removed in the next major version. Instead, we recommend to use \u201chelp\u201d attribute.</p>"},{"location":"entity/#common-options","title":"Common Options","text":"Property Type Description Default Value placeholder string <code>Deprecated</code> The grey text is shown when the input is empty. - display boolean Whether show or hide the field. true disableonEdit boolean When the form is in edit mode, the field becomes uneditable. false enable boolean The enable property sets whether a field is enabled, or not. true requiredWhenVisible boolean Make field required from UI perspecive when it appears *used only for visibility false"},{"location":"entity/components/","title":"Components supported by UCC","text":"<p>Components are used by UCC to render the Inputs and Configuration pages. Here is the list of the supported components. </p>"},{"location":"entity/components/#text","title":"<code>Text</code>","text":"<p>Underlying <code>@splunk/react-ui</code> component: <code>Text</code>.</p> <p>Example usage below:</p> <pre><code>{\n\"type\": \"text\",\n\"label\": \"Name\",\n\"validators\": [\n{\n\"type\": \"string\",\n\"errorMsg\": \"Length of Name should be between 1 to 50 characters.\",\n\"minLength\": 1,\n\"maxLength\": 50\n},\n{\n\"type\": \"regex\",\n\"errorMsg\": \"Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n\"pattern\": \"^[a-zA-Z]\\\\w*$\"\n}\n],\n\"options\": {\n\"placeholder\": \"Required\"\n},\n\"field\": \"name\",\n\"help\": \"Enter a unique name for this account.\",\n\"required\": true\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/components/#text-area","title":"<code>Text Area</code>","text":"<p>Underlying <code>@splunk/react-ui</code> component: <code>TextArea</code>.</p> <p><code>textarea</code> component is very similar to <code>text</code> component, but allows to have a multi-line input for text.</p>  Options  Property Type Description Default Value rowsMax number Maximum number of rows to display. 12 rowsMin number Minimum number of rows to display. 8 <p>Example usage below:</p> <pre><code>{\n\"type\": \"textarea\",\n\"label\": \"Textarea Field\",\n\"field\": \"textarea_field\",\n\"help\": \"Help message\",\n\"options\": {\n\"rowsMin\": 3,\n\"rowsMax\": 15\n},\n\"required\": true\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/components/#single-select","title":"<code>Single Select</code>","text":"<p>A <code>singleSelect</code> is a feature that combines a drop-down box, and/or editable text field, giving the user multiple ways to input or select the desired information.</p> <p>Underlying <code>@splunk/react-ui</code> components: <code>Select</code> or <code>Combo Box</code> depending on the <code>createSearchChoice</code> option. </p> <p>When the <code>createSearchChoice</code> option is set to true, the Singleselect component becomes a text input with autocomplete.</p> <p>A clear button is visible to the right of the dropdown when this field is marked as required.</p>  Options  Property Type Description Default Value disableSearch boolean Determines whether to show the filter box. When false, the children are automatically filtered based on the label. false createSearchChoice boolean Allow the user to add arbitrary values. false referenceName string Dropdown options will be generated via an API call to the service\u2019s restHandler. - endpointUrl string Dropdown options will be generated via an API call to that endpoint. - allowList string It only accepts options that match the regex based on the name attribute when received via API call using <code>endpointUrl</code> and <code>referenceName</code>. It is applied before denyList. - denyList string It filters options that don\u2019t match the regex based on the name attribute when received via API call using <code>endpointUrl</code> and <code>referenceName</code>. - labelField string TBD - dependencies array It is used to update options via an API call when the value of any field in the dependencies list is updated. -  Example usage below:   Using referenceName option  <pre><code>{\n\"type\": \"singleSelect\",\n\"label\": \"Example Account\",\n\"options\": {\n\"referenceName\": \"account\"\n},\n\"help\": \"\",\n\"field\": \"account\",\n\"required\": true\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>  Using autoCompleteFields Options  <pre><code>{\n\"type\": \"singleSelect\",\n\"label\": \"Proxy Type\",\n\"options\": {\n\"disableSearch\": true,\n\"autoCompleteFields\": [\n{\n\"value\": \"http\",\n\"label\": \"http\"\n},\n{\n\"value\": \"socks5\",\n\"label\": \"socks5\"\n}\n]\n},\n\"defaultValue\": \"http\",\n\"field\": \"proxy_type\"\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>  Using createSearchChoice option  <pre><code>{\n\"type\": \"singleSelect\",\n\"label\": \"Index\",\n\"validators\": [\n{\n\"type\": \"string\",\n\"errorMsg\": \"Length of index name should be between 1 to 80 characters.\",\n\"minLength\": 1,\n\"maxLength\": 80\n}\n],\n\"defaultValue\": \"default\",\n\"options\": {\n\"endpointUrl\": \"data/indexes\",\n\"denyList\": \"^_.*$\",\n\"createSearchChoice\": true\n},\n\"field\": \"index\",\n\"required\": true\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>  Using autoCompleteFields option with groups  <pre><code>{\n\"field\": \"singleSelectTest\",\n\"label\": \"Single Select Group Test\",\n\"type\": \"singleSelect\",\n\"options\": {\n\"createSearchChoice\": true,\n\"autoCompleteFields\": [\n{\n\"label\": \"Group1\",\n\"children\": [\n{\n\"value\": \"one\",\n\"label\": \"One\"\n},\n{\n\"value\": \"two\",\n\"label\": \"Two\"\n}\n]\n},\n{\n\"label\": \"Group2\",\n\"children\": [\n{\n\"value\": \"three\",\n\"label\": \"Three\"\n},\n{\n\"value\": \"four\",\n\"label\": \"Four\"\n}\n]\n}\n]\n}\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/components/#checkbox","title":"<code>Checkbox</code>","text":"<p>Underlying <code>@splunk/react-ui</code> component: <code>Switch</code>.</p> <p>Example usage below:</p> <pre><code>{\n\"type\": \"checkbox\",\n\"label\": \"Enable\",\n\"field\": \"proxy_enabled\"\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/components/#checkboxgroup","title":"<code>CheckboxGroup</code>","text":"<p>Example usage below:</p> <pre><code>{\n\"type\": \"checkboxGroup\",\n\"label\": \"CheckboxGroupTitle\",\n\"field\": \"api3\",\n\"options\": {\n\"groups\": [\n{\n\"label\": \"Group 1\",\n\"options\": {\n\"isExpandable\": true,\n\"expand\": true\n},\n\"fields\": [\"rowUnderGroup1\"]\n},\n{\n\"label\": \"Group 3\",\n\"options\": {\n\"isExpandable\": true,\n\"expand\": true\n},\n\"fields\": [\"field223\", \"160validation\"]\n}\n],\n\"rows\": [\n{\n\"field\": \"rowWithoutGroup\",\n\"input\": {\n\"defaultValue\": 1,\n\"required\": true\n}\n},\n{\n\"field\": \"rowUnderGroup1\",\n\"checkbox\": {\n\"label\": \"Row under Group 1\",\n\"defaultValue\": true\n},\n\"input\": {\n\"defaultValue\": 1200,\n\"required\": false\n}\n},\n{\n\"field\": \"field223\",\n\"checkbox\": {\n\"label\": \"Required field\",\n\"defaultValue\": true\n},\n\"input\": {\n\"required\": true\n}\n},\n{\n\"field\": \"160validation\",\n\"checkbox\": {\n\"label\": \"from 1 to 60 validation\"\n},\n\"input\": {\n\"validators\": [\n{\n\"type\": \"number\",\n\"range\": [1, 60]\n}\n]\n}\n}\n]\n}\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p> <p>The component maps and unmaps values into a single field in the format <code>fieldName1/fieldValue2,fieldName2/fieldValue2</code>, but only for checked rows. For the given example, it emits the following value: <code>rowUnderGroup1/1200,rowWithoutGroup_2/3600</code>.</p>"},{"location":"entity/components/#multiple-select","title":"<code>Multiple Select</code>","text":"<p>Underlying <code>@splunk/react-ui</code> component: <code>Multiselect</code>.</p> <p>Multiselect allows the user to select multiple options at once.</p>  Options  Property Type Description Default Value items array The arrayof options with label and value. - delimiter string It delimits each value of the field with a predefined character. For example, In the data option_a|option_b, a vertical bar (the pipe character) delimits the two data items option_a and option_b. comma(<code>,</code>) createSearchChoice boolean Allow the user to add arbitrary values. false referenceName string Dropdown options will be generated via an API call to the service\u2019s restHandler. - endpointUrl string Dropdown options will be generated via an API call to that endpoint. - allowList string It only accepts options that match the regex based on the name attribute when received via API call using <code>endpointUrl</code> and <code>referenceName</code>. It is applied before denyList. - denyList string It filters options that don\u2019t match the regex based on the name attribute when received via API call using <code>endpointUrl</code> and <code>referenceName</code>. - labelField string TBD - dependencies array It is used to update options via an API call when the value of any field in the dependencies list is updated. - autoCompleteFields array It is used to add options in the Single select or Multiple select component. - <p>Example usage below:</p> <pre><code>{\n\"type\": \"multipleSelect\",\n\"field\": \"test_multiselect\",\n\"label\": \"Test Multiselect\",\n\"options\": {\n\"delimiter\": \"|\",\n\"items\": [\n{\n\"value\": \"option_a\",\n\"label\": \"Option A\"\n},\n{\n\"value\": \"option_b\",\n\"label\": \"Option B\"\n}\n]\n}\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/components/#radio-bar","title":"<code>Radio Bar</code>","text":"<p>Underlying <code>@splunk/react-ui</code> component: <code>RadioBar</code>.</p> <p>RadioBar is a component that provides the ability to select one option out of a group. It can be used when we need to select a field value from a few options.</p>  Options  Property Type Description Default Value items* array The array of options with label and value. - <p>Example usage below:</p> <pre><code>{\n\"field\": \"test_radio\",\n\"label\": \"Test Radio\",\n\"type\": \"radio\",\n\"defaultValue\": \"Yes\",\n\"required\": false,\n\"options\": {\n\"items\": [\n{\n\"value\": \"yes\",\n\"label\": \"Yes\"\n},\n{\n\"value\": \"no\",\n\"label\": \"No\"\n}\n],\n\"display\": true\n}\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/components/#help-link","title":"<code>Help Link</code>","text":"<p>Underlying <code>@splunk/react-ui</code> component: <code>Link</code>.</p> <p>It will open the link in a new tab.</p>  Options  Property Type Description Default Value text* string A message to be display in form. - link* string Link where the user will be redirected. - <p>Example usage below:</p> <pre><code>{\n\"field\": \"example_help_link\",\n\"label\": \"\",\n\"type\": \"helpLink\",\n\"options\": {\n\"text\": \"Help Link\",\n\"link\": \"https://docs.splunk.com/Documentation\",\n}\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/components/#file","title":"<code>File</code>","text":"<p>Underlying <code>@splunk/react-ui</code> component: <code>File</code>.</p> <p>It supports files that can be opened in text mode or with a text editor. Files with extensions such as txt, json, xml, yaml, pem, key, crt, etc.</p> <p>It only sends file content to the server by reading it using the readAsArrayBuffer method of the FileReader class and then decoding it into UTF-8 format using the decode method of the TextDecoder class.</p> <p>File content can be validated using in-built validators like string and regex, and a custom validator can also be implemented using a custom hook and saveValidator.</p> <p>This feature allows you to upload a single file.</p>  Options  Property Type Description Default Value fileSupportMessage string To display message inside file component. - supportedFileTypes* array A list of the file types that the user can upload. - maxFileSize number To set the maximum file size in KB that a user can upload. 500KB <p>Example usage below:</p> <pre><code>{\n\"type\": \"file\",\n\"label\": \"SA certificate\",\n\"help\": \"Upload service account's certificate\",\n\"field\": \"service_account\",\n\"options\": {\n\"fileSupportMessage\": \"Support message\",\n\"supportedFileTypes\": [\"pem\", \"txt\"],\n\"maxFileSize\": 100\n},\n\"validators\": [\n{\n\"type\": \"regex\",\n\"pattern\": \"(-----BEGIN CERTIFICATE-----(\\n|\\r|\\r\\n)([0-9a-zA-Z\\+\\/=]{64}(\\n|\\r|\\r\\n))*([0-9a-zA-Z\\+\\/=]{1,63}(\\n|\\r|\\r\\n))?-----END CERTIFICATE-----)\"\n}\n],\n\"encrypted\": true,\n\"required\": true\n}\n</code></pre> <p>This is how it looks like in the UI:</p> <p></p>"},{"location":"entity/components/#oauth","title":"<code>OAuth</code>","text":"<p>The Oauth type entity enables us to use Oauth2.0 for user authentication. Visit the Oauth Support page to learn more.</p>"},{"location":"entity/components/#custom","title":"<code>Custom</code>","text":"<p>Custom type entity enables us to create our own custom inputs within the Form components. As a result, we may include our own custom input fields on the form. Visit the Custom Control page to learn more.</p>"},{"location":"entity/validators/","title":"Validators","text":""},{"location":"entity/validators/#common-properties","title":"Common Properties","text":"<ul> <li><code>type</code>* - To specify which validator type to use.</li> <li><code>errorMsg</code>* - UCC provides default error messages. Using this attribute, A custom error message can be displayed.</li> </ul>"},{"location":"entity/validators/#string","title":"String Properties","text":"<ul> <li><code>minLength</code>* - This specifies the minimum number of characters allowed.</li> <li><code>maxLength</code>* - This specifies the maximum number of characters allowed.</li> </ul> <p>Example usage below:</p> <pre><code>{\n\"type\": \"string\",\n\"errorMsg\": \"Length of index name should be between 1 to 80 characters.\",\n\"minLength\": 1,\n\"maxLength\": 80\n}\n</code></pre>"},{"location":"entity/validators/#regex","title":"Regex Properties","text":"<ul> <li><code>pattern</code>* - Regex pattern</li> </ul> <p>Example usage below:</p> <pre><code>{\n\"type\": \"regex\",\n\"errorMsg\": \"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n\"pattern\": \"^[a-zA-Z]\\\\w*$\"\n}\n</code></pre>"},{"location":"entity/validators/#number","title":"Number Properties","text":"<ul> <li><code>range</code>* - The range within which the target value should fall.</li> </ul> <p>Example usage below:</p> <pre><code>{\n\"type\": \"number\",\n\"range\": [\n1,\n65535\n]\n}\n</code></pre>"},{"location":"entity/validators/#url","title":"URL","text":"<p>No parameters are needed.</p> <p>It\u2019s using a regexp internally this regex for checking whether a field value is a URL or not.</p>"},{"location":"entity/validators/#email","title":"Email","text":"<p>No parameters are needed.</p> <p>It\u2019s using a regexp internally suggested by WHATWG</p>"},{"location":"entity/validators/#ipv4","title":"IPV4","text":"<p>No parameters are needed.</p> <p>Internally, it checks the IPV4 address using this regex.</p>"},{"location":"entity/validators/#date","title":"Date","text":"<p>No parameters are needed.</p> <p>It is validated whether the field\u2019s value is a date in ISO 8601 format. It is using the regex from moment.js.</p>"},{"location":"inputs/","title":"Inputs","text":"<p>The input page stores configuration information for data collection. Multiple inputs can be created on the Inputs page.</p> <p>Developers are required to add services in the global config file to create a new Input. If multiple services are provided, a dropdown field will appear on the Inputs page. In contrast, a button will be displayed for a single service.</p>"},{"location":"inputs/#properties","title":"Properties","text":"Property Type Description title* string - description string To provide a brief summary of an inputs page. menu object This property allows you to enable the custom menu feature. table object To display input stanzas in a tabular format. groupsMenu array This property allows you to enable the multi-level menu feature. services* array To specify a list of modular inputs."},{"location":"inputs/#services-properties","title":"Services Properties","text":"Property Type Description name* string To define the particular service name. title* string To show the title of the service. subTitle string To show the subtitle (or additional information) of the service. entity* array A list of fields and their properties. groups array It is used to divide forms into distinct sections, each comprising relevant fields. style string By specifying this property in the global config file, the forms can either be opened as a new page or in a dialog. Supported values are \u201cpage\u201d or \u201cdialog\u201d.  Default value is dialog. options object This property allows you to enable the saveValidator feature. hook object It is used to add custom behaviour to forms. Visit the Custom Hook page to learn more. warning object It is used to add custom warning message for each of modes (\u2018create\u2019, \u2018edit\u2019, \u2018config\u2019, \u2018clone\u2019), message is displayed on form conf string TBD restHandlerName string TBD restHandlerModule string TBD restHandlerClass string TBD"},{"location":"inputs/#usage","title":"Usage","text":"<p>This is how global config looks like without tabs:</p> <pre><code>\"pages\": {\n\"inputs\": {\n\"title\": \"Inputs\",\n\"description\": \"Manage your data inputs\",\n\"services\": [\n{\n\"name\": \"example_input_one\",\n\"title\": \"Example Input\",\n\"entity\": []\n},\n{\n\"name\": \"example_input_two\",\n\"title\": \"Example Input Two\",\n\"entity\": []\n}\n],\n\"table\": {\n\"actions\": [\n\"edit\",\n\"enable\",\n\"delete\",\n\"clone\"\n],\n\"header\": [],\n\"moreInfo\": []\n}\n}\n},\n</code></pre>"},{"location":"inputs/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"inputs/multilevel_menu/","title":"Multi-level Menu","text":"<p>This feature allows us to organize the input services into different categories. As a result, each group/category will have a separate sub-menu that can include numerous types of input services. Inputs services can also belong to multiple groups/categories.</p> <p>Using the Custom Hook, <code>groupName</code> can be saved in any form field for a specific inputs service stanza.</p> <p><code>Tabs</code> and <code>Multi-level menu</code> feature cannot be used together.</p>"},{"location":"inputs/multilevel_menu/#usage","title":"Usage","text":"<pre><code>\"inputs\": {\n\"title\": \"Inputs\",\n\"table\": {},\n\"groupsMenu\": [\n{\n\"groupName\": \"group_one\",\n\"groupTitle\": \"Group One\",\n\"groupServices\": [\"example_input_one\", \"example_input_two\"]\n},\n{\n\"groupName\": \"example_input_three\", \"groupTitle\": \"Example Input Three\"\n},\n{\n\"groupName\": \"group_two\",\n\"groupTitle\": \"Group Two\",\n\"groupServices\": [\"example_input_two\", \"example_input_four\"]\n}\n],\n\"services\": [\n{\n\"name\": \"example_input_one\",\n\"title\": \"Distinct Input One\"\n\"entity\": []\n},\n{\n\"name\": \"example_input_two\",\n\"title\": \"Common Input Service\"\n\"entity\": []\n},\n{\n\"name\": \"example_input_three\",\n\"title\": \"Example Input Three\"\n\"entity\": []\n},\n{\n\"name\": \"example_input_four\",\n\"title\": \"Distinct Input Two\"\n\"entity\": []\n}\n]\n}\n</code></pre> <p>If <code>groupServices</code> is provided under a group, then all services listed in the array will be displayed in the subMenu. If it is not provided, then that group will be considered as a service.</p>"},{"location":"inputs/multilevel_menu/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p> <p></p>"},{"location":"inputs/tabs/","title":"Tabs","text":"<p>This feature allows us to separate inputs based on their service name. So, when multiple inputs services are provided in the global config file and if developers wish to display each input service in a separate tab (and table) they can make use of the tabs feature.</p> <p>The <code>table</code> property must be present in the services to use the tabs feature.</p> <p>If <code>title</code> and <code>description</code> are provided in the global config file then it would change when changing the tab.</p>"},{"location":"inputs/tabs/#usage","title":"Usage","text":"<pre><code>\"pages\": {\n\"inputs\": {\n\"title\": \"Inputs\",\n\"services\": [\n{\n\"name\": \"example_input_one\",\n\"description\": \"This is a description for Input One\",\n\"title\": \"Example Input\",\n\"entity\": [],\n\"table\": {\n\"actions\": [\n\"edit\",\n\"enable\",\n\"delete\",\n\"clone\"\n],\n\"header\": [],\n\"moreInfo\": []\n},\n\"warning\": {\n\"create\": \"Warning text for create mode\",\n\"edit\": \"Warning text for edit mode\",\n\"clone\": \"Warning text for clone mode\",\n\"config\": \"Warning text for config mode\",\n}\n},\n{\n\"name\": \"example_input_two\",\n\"description\": \"This is a description for Input Two\",\n\"title\": \"Example Input Two\",\n\"entity\": [],\n\"table\": {\n\"actions\": [\n\"edit\",\n\"enable\",\n\"delete\",\n\"clone\"\n],\n\"header\": [],\n\"moreInfo\": [],\n\"customRow\":{\n\"type\": \"external\",\n\"src\": \"custom_row\"\n}\n}\n}\n]\n}\n},\n</code></pre> <p>Note:</p> <p>When using the Tabs feature, if the <code>table</code>  or <code>description</code> property is provided in the <code>inputs</code>, the error <code>instance.pages.inputs is not one of [subschema 0], [subschema 1]</code> will be displayed.</p> <p>Custom Menu is not supported with tabs feature.</p>"},{"location":"inputs/tabs/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"}]}