(self.webpackChunk_splunk_ucc_ui_lib=self.webpackChunk_splunk_ucc_ui_lib||[]).push([[872],{"./node_modules/@splunk/react-icons/ChevronRight.js":(module,__unused_webpack_exports,__webpack_require__)=>{(()=>{"use strict";var e={n:r=>{var t=r&&r.__esModule?()=>r.default:()=>r;return e.d(t,{a:t}),t},d:(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>y});const t=__webpack_require__("./node_modules/react/index.js");var n=e.n(t);const o=__webpack_require__("./node_modules/@splunk/react-icons/SVG.js");var a=e.n(o);const u=__webpack_require__("./node_modules/@splunk/react-icons/IconProvider.js");function l(e,r){if(null==e)return{};var n,o,t=function i(e,r){if(null==e)return{};var o,a,t={},n=Object.keys(e);for(a=0;a<n.length;a++)o=n[a],r.indexOf(o)>=0||(t[o]=e[o]);return t}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var f=new Map;f.set("outlined",(function(){return n().createElement(n().Fragment,null,n().createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M14.7858 11.9999L8.48564 5.69972C8.09512 5.3092 8.09512 4.67603 8.48564 4.28551C8.87617 3.89499 9.50933 3.89499 9.89986 4.28551L16.5536 10.9393C17.1394 11.525 17.1394 12.4748 16.5536 13.0606L9.9012 19.713C9.51067 20.1035 8.87751 20.1035 8.48698 19.713C8.09646 19.3224 8.09646 18.6893 8.48698 18.2988L14.7858 11.9999Z"}))}));var d=["default","outlined"],s=function e(r){return"default"===r||r&&!function e(r){return d.indexOf(r)>=0}(r)?"outlined":r},p=function e(r){var o=r.children,i=r.variant,c=l(r,["children","variant"]),d=s(i),v="chevronright-".concat(d),p=(0,t.useContext)(u.IconContext),y=f.get(d);if(p&&y){var b=p.toRender;if((0,p.addIcon)(v,y()),!b)return null}return n().createElement(a(),c,o,p?n().createElement("use",{href:"#".concat(v)}):!!y&&y())};p.defaultProps={variant:"default"};const y=p;module.exports=r})()},"./node_modules/@splunk/react-icons/enterprise/ChevronRight.js":(module,__unused_webpack_exports,__webpack_require__)=>{(()=>{"use strict";var e={n:r=>{var t=r&&r.__esModule?()=>r.default:()=>r;return e.d(t,{a:t}),t},d:(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>l});const t=__webpack_require__("./node_modules/react/index.js");var n=e.n(t);const o=__webpack_require__("./node_modules/@splunk/ui-utils/i18n.js"),a=__webpack_require__("./node_modules/@splunk/react-icons/SVGInternal.js");var u=e.n(a);function i(){return i=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},i.apply(this,arguments)}function l(e){return n().createElement(u(),i({screenReaderText:(0,o._)("Chevron Right"),viewBox:"0 0 885 1500"},e),n().createElement("path",{d:"M134.59 0l750 750-751.028 750L0 1365.41 615.41 750 0 134.59"}))}module.exports=r})()},"./src/components/CheckboxGroup/CheckboxGroup.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Base:()=>Base,CreateMode:()=>CreateMode,MixedWithGroups:()=>MixedWithGroups,WithSingleGroup:()=>WithSingleGroup,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _CheckboxGroup__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/CheckboxGroup/CheckboxGroup.tsx"),_constants_modes__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/constants/modes.ts");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:String(i)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}const __WEBPACK_DEFAULT_EXPORT__={component:_CheckboxGroup__WEBPACK_IMPORTED_MODULE_0__.Z,title:"Components/CheckboxGroup"};var Base={args:{mode:_constants_modes__WEBPACK_IMPORTED_MODULE_1__.bZ,field:"api",value:"collect_collaboration/1200,collect_file/1,collect_task/1",controlOptions:{rows:[{field:"collect_collaboration",checkbox:{label:"Collect folder collaboration"},input:{defaultValue:1200,required:!1}},{field:"collect_file",checkbox:{label:"Collect file metadata"},input:{defaultValue:1,required:!0}},{field:"collect_task",checkbox:{label:"Collect tasks and comments"},input:{defaultValue:1,required:!0}}]}}},WithSingleGroup={args:_objectSpread(_objectSpread({},Base.args),{},{value:void 0,controlOptions:{groups:[{label:"Group 1",fields:["collect_collaboration","collect_file"],options:{isExpandable:!1}}],rows:[{field:"collect_collaboration",checkbox:{label:"Collect folder collaboration"},input:{defaultValue:1200,required:!1}},{field:"collect_file",checkbox:{label:"Collect file metadata"},input:{defaultValue:1,required:!0}}]}})},MixedWithGroups={args:_objectSpread(_objectSpread({},Base.args),{},{value:void 0,controlOptions:{groups:[{label:"Expandable group",fields:["collect_collaboration","collect_file"],options:{isExpandable:!0,expand:!0}},{label:"Non expandable group",fields:["collect_folder_metadata"],options:{isExpandable:!1}}],rows:[{field:"collect_collaboration",checkbox:{label:"Collect folder collaboration"},input:{defaultValue:1200,required:!1}},{field:"collect_file",checkbox:{label:"Collect file metadata"},input:{defaultValue:1,required:!0}},{field:"collect_task",checkbox:{label:"Collect tasks and comments"},input:{defaultValue:1,required:!0}},{field:"collect_folder_metadata",checkbox:{label:"Collect folder metadata"},input:{defaultValue:3600,required:!0}}]}})},CreateMode={args:_objectSpread(_objectSpread({},Base.args),{},{value:"field1/1,field2/1",mode:_constants_modes__WEBPACK_IMPORTED_MODULE_1__.jg,controlOptions:{rows:[{field:"field1",checkbox:{label:"Default true",defaultValue:!0},input:{defaultValue:1200,required:!1}},{field:"field2",checkbox:{label:"Default false",defaultValue:!1},input:{defaultValue:2,required:!0}}]}})};Base.parameters={...Base.parameters,docs:{...Base.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: MODE_EDIT,\n    field: 'api',\n    value: 'collect_collaboration/1200,collect_file/1,collect_task/1',\n    controlOptions: {\n      rows: [{\n        field: 'collect_collaboration',\n        checkbox: {\n          label: 'Collect folder collaboration'\n        },\n        input: {\n          defaultValue: 1200,\n          required: false\n        }\n      }, {\n        field: 'collect_file',\n        checkbox: {\n          label: 'Collect file metadata'\n        },\n        input: {\n          defaultValue: 1,\n          required: true\n        }\n      }, {\n        field: 'collect_task',\n        checkbox: {\n          label: 'Collect tasks and comments'\n        },\n        input: {\n          defaultValue: 1,\n          required: true\n        }\n      }]\n    }\n  }\n}",...Base.parameters?.docs?.source}}},WithSingleGroup.parameters={...WithSingleGroup.parameters,docs:{...WithSingleGroup.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Base.args,\n    value: undefined,\n    controlOptions: {\n      groups: [{\n        label: 'Group 1',\n        fields: ['collect_collaboration', 'collect_file'],\n        options: {\n          isExpandable: false\n        }\n      }],\n      rows: [{\n        field: 'collect_collaboration',\n        checkbox: {\n          label: 'Collect folder collaboration'\n        },\n        input: {\n          defaultValue: 1200,\n          required: false\n        }\n      }, {\n        field: 'collect_file',\n        checkbox: {\n          label: 'Collect file metadata'\n        },\n        input: {\n          defaultValue: 1,\n          required: true\n        }\n      }]\n    }\n  }\n}",...WithSingleGroup.parameters?.docs?.source}}},MixedWithGroups.parameters={...MixedWithGroups.parameters,docs:{...MixedWithGroups.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Base.args,\n    value: undefined,\n    controlOptions: {\n      groups: [{\n        label: 'Expandable group',\n        fields: ['collect_collaboration', 'collect_file'],\n        options: {\n          isExpandable: true,\n          expand: true\n        }\n      }, {\n        label: 'Non expandable group',\n        fields: ['collect_folder_metadata'],\n        options: {\n          isExpandable: false\n        }\n      }],\n      rows: [{\n        field: 'collect_collaboration',\n        checkbox: {\n          label: 'Collect folder collaboration'\n        },\n        input: {\n          defaultValue: 1200,\n          required: false\n        }\n      }, {\n        field: 'collect_file',\n        checkbox: {\n          label: 'Collect file metadata'\n        },\n        input: {\n          defaultValue: 1,\n          required: true\n        }\n      }, {\n        field: 'collect_task',\n        checkbox: {\n          label: 'Collect tasks and comments'\n        },\n        input: {\n          defaultValue: 1,\n          required: true\n        }\n      }, {\n        field: 'collect_folder_metadata',\n        checkbox: {\n          label: 'Collect folder metadata'\n        },\n        input: {\n          defaultValue: 3600,\n          required: true\n        }\n      }]\n    }\n  }\n}",...MixedWithGroups.parameters?.docs?.source}}},CreateMode.parameters={...CreateMode.parameters,docs:{...CreateMode.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Base.args,\n    value: 'field1/1,field2/1',\n    // should be disregarded\n    mode: MODE_CREATE,\n    controlOptions: {\n      rows: [{\n        field: 'field1',\n        checkbox: {\n          label: 'Default true',\n          defaultValue: true\n        },\n        input: {\n          defaultValue: 1200,\n          required: false\n        }\n      }, {\n        field: 'field2',\n        checkbox: {\n          label: 'Default false',\n          defaultValue: false\n        },\n        input: {\n          defaultValue: 2,\n          required: true\n        }\n      }]\n    }\n  }\n}",...CreateMode.parameters?.docs?.source}}};const __namedExportsOrder=["Base","WithSingleGroup","MixedWithGroups","CreateMode"]}}]);